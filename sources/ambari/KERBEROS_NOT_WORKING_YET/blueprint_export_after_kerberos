{
  "configurations" : [
    {
      "ams-env" : {
        "properties_attributes" : { },
        "properties" : {
          "ambari_metrics_user" : "ams",
          "metrics_monitor_log_dir" : "/var/log/ambari-metrics-monitor",
          "metrics_collector_heapsize" : "512",
          "metrics_collector_pid_dir" : "/var/run/ambari-metrics-collector",
          "metrics_collector_log_dir" : "/var/log/ambari-metrics-collector",
          "metrics_monitor_pid_dir" : "/var/run/ambari-metrics-monitor",
          "content" : "\n# Set environment variables here.\n\n# The java implementation to use. Java 1.6 required.\nexport JAVA_HOME={{java64_home}}\n\n# Collector Log directory for log4j\nexport AMS_COLLECTOR_LOG_DIR={{ams_collector_log_dir}}\n\n# Monitor Log directory for outfile\nexport AMS_MONITOR_LOG_DIR={{ams_monitor_log_dir}}\n\n# Collector pid directory\nexport AMS_COLLECTOR_PID_DIR={{ams_collector_pid_dir}}\n\n# Monitor pid directory\nexport AMS_MONITOR_PID_DIR={{ams_monitor_pid_dir}}\n\n# AMS HBase pid directory\nexport AMS_HBASE_PID_DIR={{hbase_pid_dir}}\n\n# AMS Collector heapsize\nexport AMS_COLLECTOR_HEAPSIZE={{metrics_collector_heapsize}}\n\n# HBase normalizer enabled\nexport AMS_HBASE_NORMALIZER_ENABLED={{ams_hbase_normalizer_enabled}}\n\n# HBase compaction policy enabled\nexport AMS_HBASE_FIFO_COMPACTION_ENABLED={{ams_hbase_fifo_compaction_enabled}}\n\n# HBase Tables Initialization check enabled\nexport AMS_HBASE_INIT_CHECK_ENABLED={{ams_hbase_init_check_enabled}}\n\n# AMS Collector options\nexport AMS_COLLECTOR_OPTS=\"-Djava.library.path=/usr/lib/ams-hbase/lib/hadoop-native\"\n{% if security_enabled %}\nexport AMS_COLLECTOR_OPTS=\"$AMS_COLLECTOR_OPTS -Djava.security.auth.login.config={{ams_collector_jaas_config_file}}\"\n{% endif %}\n\n# AMS Collector GC options\nexport AMS_COLLECTOR_GC_OPTS=\"-XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:{{ams_collector_log_dir}}/collector-gc.log-`date +'%Y%m%d%H%M'`\"\nexport AMS_COLLECTOR_OPTS=\"$AMS_COLLECTOR_OPTS $AMS_COLLECTOR_GC_OPTS\""
        }
      }
    },
    {
      "capacity-scheduler" : {
        "properties_attributes" : { },
        "properties" : {
          "yarn.scheduler.capacity.root.accessible-node-labels" : "*",
          "yarn.scheduler.capacity.default.minimum-user-limit-percent" : "100",
          "yarn.scheduler.capacity.maximum-am-resource-percent" : "0.2",
          "yarn.scheduler.capacity.root.acl_administer_queue" : "yarn",
          "yarn.scheduler.capacity.root.default.acl_administer_jobs" : "yarn",
          "yarn.scheduler.capacity.resource-calculator" : "org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator",
          "yarn.scheduler.capacity.root.default.capacity" : "100",
          "yarn.scheduler.capacity.root.default.user-limit-factor" : "1",
          "yarn.scheduler.capacity.root.acl_administer_jobs" : "yarn",
          "yarn.scheduler.capacity.root.queues" : "default",
          "yarn.scheduler.capacity.root.capacity" : "100",
          "yarn.scheduler.capacity.root.default.acl_submit_applications" : "yarn",
          "yarn.scheduler.capacity.root.default.maximum-capacity" : "100",
          "yarn.scheduler.capacity.node-locality-delay" : "40",
          "yarn.scheduler.capacity.root.default.acl_administer_queue" : "yarn",
          "yarn.scheduler.capacity.maximum-applications" : "10000",
          "yarn.scheduler.capacity.root.default.state" : "RUNNING"
        }
      }
    },
    {
      "zoo.cfg" : {
        "properties_attributes" : { },
        "properties" : {
          "autopurge.purgeInterval" : "24",
          "dataDir" : "/hadoop/zookeeper",
          "autopurge.snapRetainCount" : "30",
          "clientPort" : "2181",
          "initLimit" : "10",
          "tickTime" : "2000",
          "syncLimit" : "5"
        }
      }
    },
    {
      "ams-hbase-site" : {
        "properties_attributes" : {
          "final" : {
            "hbase.zookeeper.quorum" : "true"
          }
        },
        "properties" : {
          "hfile.block.cache.size" : "0.3",
          "phoenix.query.spoolThresholdBytes" : "20971520",
          "hbase.zookeeper.property.dataDir" : "${hbase.tmp.dir}/zookeeper",
          "hbase.regionserver.thread.compaction.large" : "2",
          "hbase.master.port" : "61300",
          "zookeeper.session.timeout.localHBaseCluster" : "120000",
          "phoenix.query.keepAliveMs" : "300000",
          "hbase.local.dir" : "${hbase.tmp.dir}/local",
          "phoenix.query.timeoutMs" : "300000",
          "hbase.regionserver.thread.compaction.small" : "3",
          "hbase.zookeeper.quorum" : "{{zookeeper_quorum_hosts}}",
          "hbase.client.scanner.timeout.period" : "300000",
          "hbase.regionserver.info.port" : "61330",
          "phoenix.query.rowKeyOrderSaltedTable" : "true",
          "phoenix.mutate.batchSize" : "10000",
          "zookeeper.znode.parent" : "/ams-hbase-secure",
          "hbase.master.info.port" : "61310",
          "hbase.rootdir" : "file:///var/lib/ambari-metrics-collector/hbase",
          "hbase.cluster.distributed" : "false",
          "hbase.hregion.majorcompaction" : "0",
          "hbase.hstore.flusher.count" : "2",
          "hbase.master.normalizer.class" : "org.apache.hadoop.hbase.master.normalizer.SimpleRegionNormalizer",
          "hbase.snapshot.enabled" : "false",
          "phoenix.spool.directory" : "${hbase.tmp.dir}/phoenix-spool",
          "phoenix.coprocessor.maxMetaDataCacheSize" : "20480000",
          "hbase.zookeeper.property.tickTime" : "6000",
          "hbase.zookeeper.leaderport" : "61388",
          "phoenix.sequence.saltBuckets" : "2",
          "hbase.hstore.blockingStoreFiles" : "200",
          "zookeeper.session.timeout" : "120000",
          "phoenix.coprocessor.maxServerCacheTimeToLiveMs" : "60000",
          "hbase.master.info.bindAddress" : "0.0.0.0",
          "hbase.regionserver.global.memstore.lowerLimit" : "0.4",
          "dfs.client.read.shortcircuit" : "true",
          "phoenix.query.maxGlobalMemoryPercentage" : "15",
          "hbase.hregion.memstore.flush.size" : "134217728",
          "hbase.hregion.max.filesize" : "4294967296",
          "phoenix.groupby.maxCacheSize" : "307200000",
          "hbase.master.wait.on.regionservers.mintostart" : "1",
          "hbase.regionserver.global.memstore.upperLimit" : "0.5",
          "hbase.normalizer.period" : "600000",
          "hbase.tmp.dir" : "/var/lib/ambari-metrics-collector/hbase-tmp",
          "hbase.client.scanner.caching" : "10000",
          "hbase.replication" : "false",
          "hbase.rpc.timeout" : "300000",
          "hbase.zookeeper.peerport" : "61288",
          "hbase.regionserver.port" : "61320",
          "hbase.zookeeper.property.clientPort" : "{{zookeeper_clientPort}}",
          "hbase.hregion.memstore.block.multiplier" : "4",
          "hbase.normalizer.enabled" : "false"
        }
      }
    },
    {
      "zookeeper-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\n\n#\n# ZooKeeper Logging Configuration\n#\n\n# DEFAULT: console appender only\nlog4j.rootLogger=INFO, CONSOLE\n\n# Example with rolling log file\n#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n\n# Example with rolling log file and tracing\n#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n\n#\n# Log INFO level and above messages to the console\n#\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=INFO\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n#\n# Add ROLLINGFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender\nlog4j.appender.ROLLINGFILE.Threshold=DEBUG\nlog4j.appender.ROLLINGFILE.File=zookeeper.log\n\n# Max log file size of 10MB\nlog4j.appender.ROLLINGFILE.MaxFileSize=10MB\n# uncomment the next line to limit number of backup files\n#log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n\nlog4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n\n#\n# Add TRACEFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.TRACEFILE=org.apache.log4j.FileAppender\nlog4j.appender.TRACEFILE.Threshold=TRACE\nlog4j.appender.TRACEFILE.File=zookeeper_trace.log\n\nlog4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout\n### Notice we are including log4j's NDC here (%x)\nlog4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L][%x] - %m%n"
        }
      }
    },
    {
      "ranger-hdfs-policymgr-ssl" : {
        "properties_attributes" : { },
        "properties" : {
          "xasecure.policymgr.clientssl.truststore" : "/usr/hdp/current/hadoop-client/conf/ranger-plugin-truststore.jks",
          "xasecure.policymgr.clientssl.keystore" : "/usr/hdp/current/hadoop-client/conf/ranger-plugin-keystore.jks",
          "xasecure.policymgr.clientssl.keystore.credential.file" : "jceks://file{{credential_file}}",
          "xasecure.policymgr.clientssl.truststore.credential.file" : "jceks://file{{credential_file}}"
        }
      }
    },
    {
      "ams-site" : {
        "properties_attributes" : { },
        "properties" : {
          "timeline.metrics.cluster.aggregator.hourly.interval" : "3600",
          "timeline.metrics.cluster.aggregator.minute.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.cluster.aggregator.daily.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.host.aggregator.hourly.interval" : "3600",
          "timeline.metrics.aggregators.skip.blockcache.enabled" : "false",
          "timeline.metrics.service.rpc.address" : "0.0.0.0:60200",
          "timeline.metrics.service.operation.mode" : "embedded",
          "timeline.metrics.aggregator.checkpoint.dir" : "/var/lib/ambari-metrics-collector/checkpoint",
          "timeline.metrics.cluster.aggregator.second.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.service.http.policy" : "HTTP_ONLY",
          "timeline.metrics.host.aggregator.minute.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.service.watcher.timeout" : "30",
          "timeline.metrics.service.checkpointDelay" : "60",
          "timeline.metrics.cluster.aggregator.second.interval" : "120",
          "timeline.metrics.service.webapp.address" : "%HOSTGROUP::host_group_2%:6188",
          "timeline.metrics.host.aggregator.daily.ttl" : "31536000",
          "timeline.metrics.service.watcher.delay" : "30",
          "timeline.metrics.service.watcher.disabled" : "false",
          "timeline.metrics.hbase.fifo.compaction.enabled" : "true",
          "timeline.metrics.hbase.init.check.enabled" : "true",
          "timeline.metrics.host.aggregator.hourly.disabled" : "false",
          "timeline.metrics.service.cluster.aggregator.appIds" : "datanode,nodemanager,hbase",
          "timeline.metrics.cluster.aggregator.hourly.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.host.aggregator.daily.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.service.resultset.fetchSize" : "2000",
          "timeline.metrics.cluster.aggregator.hourly.ttl" : "31536000",
          "timeline.metrics.host.aggregator.ttl" : "86400",
          "phoenix.spool.directory" : "/tmp",
          "timeline.metrics.host.aggregate.splitpoints" : " ",
          "timeline.metrics.service.handler.thread.count" : "20",
          "timeline.metrics.cache.size" : "150",
          "timeline.metrics.cluster.aggregator.minute.interval" : "300",
          "timeline.metrics.cluster.aggregator.minute.ttl" : "2592000",
          "timeline.metrics.host.aggregator.minute.interval" : "300",
          "timeline.metrics.cluster.aggregator.interpolation.enabled" : "true",
          "timeline.metrics.cache.commit.interval" : "3",
          "timeline.metrics.host.aggregator.minute.disabled" : "false",
          "timeline.metrics.cache.enabled" : "true",
          "timeline.metrics.cluster.aggregate.splitpoints" : " ",
          "timeline.metrics.cluster.aggregator.minute.disabled" : "false",
          "timeline.metrics.service.use.groupBy.aggregators" : "true",
          "phoenix.query.maxGlobalMemoryPercentage" : "25",
          "timeline.metrics.service.default.result.limit" : "15840",
          "timeline.metrics.hbase.compression.scheme" : "SNAPPY",
          "timeline.metrics.cluster.aggregator.daily.ttl" : "63072000",
          "timeline.metrics.sink.report.interval" : "60",
          "timeline.metrics.cluster.aggregator.second.timeslice.interval" : "30",
          "timeline.metrics.host.aggregator.hourly.ttl" : "2592000",
          "timeline.metrics.cluster.aggregator.daily.interval" : "86400",
          "timeline.metrics.host.aggregator.daily.disabled" : "false",
          "timeline.metrics.cluster.aggregator.daily.disabled" : "false",
          "timeline.metrics.cluster.aggregator.hourly.disabled" : "false",
          "timeline.metrics.service.watcher.initial.delay" : "600",
          "timeline.metrics.host.aggregator.minute.ttl" : "604800",
          "timeline.metrics.hbase.data.block.encoding" : "FAST_DIFF",
          "timeline.metrics.cluster.aggregator.second.disabled" : "false",
          "timeline.metrics.sink.collection.period" : "10",
          "timeline.metrics.host.aggregator.hourly.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.daily.aggregator.minute.interval" : "86400",
          "timeline.metrics.cluster.aggregator.second.ttl" : "259200"
        }
      }
    },
    {
      "krb5-conf" : {
        "properties_attributes" : { },
        "properties" : {
          "manage_krb5_conf" : "true",
          "conf_dir" : "/etc",
          "content" : "\n[libdefaults]\n  renew_lifetime = 7d\n  forwardable = true\n  default_realm = {{realm}}\n  ticket_lifetime = 24h\n  dns_lookup_realm = false\n  dns_lookup_kdc = false\n  default_ccache_name = /tmp/krb5cc_%{uid}\n  #default_tgs_enctypes = {{encryption_types}}\n  #default_tkt_enctypes = {{encryption_types}}\n{% if domains %}\n[domain_realm]\n{%- for domain in domains.split(',') %}\n  {{domain|trim()}} = {{realm}}\n{%- endfor %}\n{% endif %}\n[logging]\n  default = FILE:/var/log/krb5kdc.log\n  admin_server = FILE:/var/log/kadmind.log\n  kdc = FILE:/var/log/krb5kdc.log\n\n[realms]\n  {{realm}} = {\n{%- if kdc_hosts > 0 -%}\n{%- set kdc_host_list = kdc_hosts.split(',')  -%}\n{%- if kdc_host_list and kdc_host_list|length > 0 %}\n    admin_server = {{admin_server_host|default(kdc_host_list[0]|trim(), True)}}\n{%- if kdc_host_list -%}\n{% for kdc_host in kdc_host_list %}\n    kdc = {{kdc_host|trim()}}\n{%- endfor -%}\n{% endif %}\n{%- endif %}\n{%- endif %}\n  }\n\n{# Append additional realm declarations below #}"
        }
      }
    },
    {
      "mapred-site" : {
        "properties_attributes" : { },
        "properties" : {
          "mapreduce.map.speculative" : "false",
          "mapreduce.jobhistory.keytab" : "/etc/security/keytabs/jhs.service.keytab",
          "mapreduce.jobhistory.recovery.store.class" : "org.apache.hadoop.mapreduce.v2.hs.HistoryServerLeveldbStateStoreService",
          "mapreduce.job.counters.max" : "130",
          "mapreduce.reduce.log.level" : "INFO",
          "mapreduce.shuffle.port" : "13562",
          "yarn.app.mapreduce.am.admin-command-opts" : "-Dhdp.version=${hdp.version}",
          "mapreduce.jobhistory.principal" : "jhs/_HOST@DEVOPS.LOCAL",
          "mapreduce.job.emit-timeline-data" : "false",
          "mapreduce.jobhistory.recovery.enable" : "true",
          "mapreduce.map.log.level" : "INFO",
          "yarn.app.mapreduce.am.staging-dir" : "/user",
          "mapreduce.reduce.shuffle.merge.percent" : "0.66",
          "mapreduce.output.fileoutputformat.compress" : "false",
          "mapreduce.admin.map.child.java.opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}",
          "mapreduce.job.reduce.slowstart.completedmaps" : "0.05",
          "mapreduce.jobhistory.http.policy" : "HTTP_ONLY",
          "mapreduce.job.queuename" : "default",
          "mapreduce.application.framework.path" : "/hdp/apps/${hdp.version}/mapreduce/mapreduce.tar.gz#mr-framework",
          "mapreduce.application.classpath" : "$PWD/mr-framework/hadoop/share/hadoop/mapreduce/*:$PWD/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:$PWD/mr-framework/hadoop/share/hadoop/common/*:$PWD/mr-framework/hadoop/share/hadoop/common/lib/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/lib/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/lib/*:$PWD/mr-framework/hadoop/share/hadoop/tools/lib/*:/usr/hdp/${hdp.version}/hadoop/lib/hadoop-lzo-0.6.0.${hdp.version}.jar:/etc/hadoop/conf/secure",
          "mapreduce.jobhistory.webapp.spnego-keytab-file" : "/etc/security/keytabs/spnego.service.keytab",
          "mapreduce.reduce.java.opts" : "-Xmx756m",
          "mapreduce.map.output.compress" : "false",
          "mapreduce.reduce.input.buffer.percent" : "0.0",
          "mapreduce.jobhistory.intermediate-done-dir" : "/mr-history/tmp",
          "yarn.app.mapreduce.am.log.level" : "INFO",
          "mapreduce.reduce.shuffle.fetch.retry.interval-ms" : "1000",
          "mapreduce.reduce.shuffle.input.buffer.percent" : "0.7",
          "mapreduce.reduce.speculative" : "false",
          "mapreduce.output.fileoutputformat.compress.type" : "BLOCK",
          "mapreduce.task.io.sort.mb" : "358",
          "mapreduce.cluster.administrators" : " hadoop",
          "mapreduce.reduce.shuffle.fetch.retry.timeout-ms" : "30000",
          "mapreduce.jobhistory.webapp.spnego-principal" : "HTTP/_HOST@DEVOPS.LOCAL",
          "mapreduce.jobhistory.address" : "%HOSTGROUP::host_group_2%:10020",
          "mapreduce.map.sort.spill.percent" : "0.7",
          "mapreduce.map.memory.mb" : "512",
          "mapreduce.admin.reduce.child.java.opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}",
          "mapreduce.jobhistory.bind-host" : "0.0.0.0",
          "mapreduce.task.timeout" : "300000",
          "mapreduce.admin.user.env" : "LD_LIBRARY_PATH=/usr/hdp/${hdp.version}/hadoop/lib/native:/usr/hdp/${hdp.version}/hadoop/lib/native/Linux-amd64-64",
          "mapreduce.am.max-attempts" : "2",
          "mapreduce.reduce.memory.mb" : "1024",
          "mapreduce.framework.name" : "yarn",
          "mapreduce.reduce.shuffle.parallelcopies" : "30",
          "mapreduce.jobhistory.done-dir" : "/mr-history/done",
          "mapreduce.jobhistory.webapp.address" : "%HOSTGROUP::host_group_2%:19888",
          "mapreduce.reduce.shuffle.fetch.retry.enabled" : "1",
          "mapreduce.task.io.sort.factor" : "100",
          "mapreduce.jobhistory.recovery.store.leveldb.path" : "/hadoop/mapreduce/jhs",
          "yarn.app.mapreduce.am.command-opts" : "-Xmx410m",
          "mapreduce.map.java.opts" : "-Xmx410m",
          "yarn.app.mapreduce.am.resource.mb" : "512"
        }
      }
    },
    {
      "ranger-yarn-policymgr-ssl" : {
        "properties_attributes" : { },
        "properties" : {
          "xasecure.policymgr.clientssl.truststore" : "/usr/hdp/current/hadoop-client/conf/ranger-yarn-plugin-truststore.jks",
          "xasecure.policymgr.clientssl.keystore" : "/usr/hdp/current/hadoop-client/conf/ranger-yarn-plugin-keystore.jks",
          "xasecure.policymgr.clientssl.keystore.credential.file" : "jceks://file{{credential_file}}",
          "xasecure.policymgr.clientssl.truststore.credential.file" : "jceks://file{{credential_file}}"
        }
      }
    },
    {
      "ssl-server" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.server.truststore.location" : "/etc/security/serverKeys/all.jks",
          "ssl.server.truststore.reload.interval" : "10000",
          "ssl.server.truststore.type" : "jks",
          "ssl.server.keystore.location" : "/etc/security/serverKeys/keystore.jks",
          "ssl.server.keystore.type" : "jks"
        }
      }
    },
    {
      "hdfs-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n\n# Define some default values that can be overridden by system properties\n# To change daemon root logger use hadoop_root_logger in hadoop-env\nhadoop.root.logger=INFO,console\nhadoop.log.dir=.\nhadoop.log.file=hadoop.log\n\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hadoop.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshhold=ALL\n\n#\n# Daily Rolling File Appender\n#\n\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n#\n# TaskLog Appender\n#\n\n#Default values\nhadoop.tasklog.taskid=null\nhadoop.tasklog.iscleanup=false\nhadoop.tasklog.noKeepSplits=4\nhadoop.tasklog.totalLogFileSize=100\nhadoop.tasklog.purgeLogSplits=true\nhadoop.tasklog.logsRetainHours=12\n\nlog4j.appender.TLA=org.apache.hadoop.mapred.TaskLogAppender\nlog4j.appender.TLA.taskId=${hadoop.tasklog.taskid}\nlog4j.appender.TLA.isCleanup=${hadoop.tasklog.iscleanup}\nlog4j.appender.TLA.totalLogFileSize=${hadoop.tasklog.totalLogFileSize}\n\nlog4j.appender.TLA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.TLA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n\n#\n#Security audit appender\n#\nhadoop.security.logger=INFO,console\nhadoop.security.log.maxfilesize=256MB\nhadoop.security.log.maxbackupindex=20\nlog4j.category.SecurityLogger=${hadoop.security.logger}\nhadoop.security.log.file=SecurityAuth.audit\nlog4j.appender.DRFAS=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.DRFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.DRFAS.DatePattern=.yyyy-MM-dd\n\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.RFAS.MaxFileSize=${hadoop.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hadoop.security.log.maxbackupindex}\n\n#\n# hdfs audit logging\n#\nhdfs.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=${hdfs.audit.logger}\nlog4j.additivity.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=false\nlog4j.appender.DRFAAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log\nlog4j.appender.DRFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.DRFAAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# NameNode metrics logging.\n# The default is to retain two namenode-metrics.log files up to 64MB each.\n#\nnamenode.metrics.logger=INFO,NullAppender\nlog4j.logger.NameNodeMetricsLog=${namenode.metrics.logger}\nlog4j.additivity.NameNodeMetricsLog=false\nlog4j.appender.NNMETRICSRFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.NNMETRICSRFA.File=${hadoop.log.dir}/namenode-metrics.log\nlog4j.appender.NNMETRICSRFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.NNMETRICSRFA.layout.ConversionPattern=%d{ISO8601} %m%n\nlog4j.appender.NNMETRICSRFA.MaxBackupIndex=1\nlog4j.appender.NNMETRICSRFA.MaxFileSize=64MB\n\n#\n# mapred audit logging\n#\nmapred.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.mapred.AuditLogger=${mapred.audit.logger}\nlog4j.additivity.org.apache.hadoop.mapred.AuditLogger=false\nlog4j.appender.MRAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.MRAUDIT.File=${hadoop.log.dir}/mapred-audit.log\nlog4j.appender.MRAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MRAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.MRAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# Rolling File Appender\n#\n\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Logfile size and and 30-day backups\nlog4j.appender.RFA.MaxFileSize=256MB\nlog4j.appender.RFA.MaxBackupIndex=10\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} - %m%n\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n# Custom Logging levels\n\nhadoop.metrics.log.level=INFO\n#log4j.logger.org.apache.hadoop.mapred.JobTracker=DEBUG\n#log4j.logger.org.apache.hadoop.mapred.TaskTracker=DEBUG\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.metrics2=${hadoop.metrics.log.level}\n\n# Jets3t library\nlog4j.logger.org.jets3t.service.impl.rest.httpclient.RestS3Service=ERROR\n\n#\n# Null Appender\n# Trap security logger on the hadoop client side\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n# Removes \"deprecated\" messages\nlog4j.logger.org.apache.hadoop.conf.Configuration.deprecation=WARN\n\n#\n# HDFS block state change log from block manager\n#\n# Uncomment the following to suppress normal block state change\n# messages from BlockManager in NameNode.\n#log4j.logger.BlockStateChange=WARN"
        }
      }
    },
    {
      "ranger-yarn-security" : {
        "properties_attributes" : { },
        "properties" : {
          "ranger.plugin.yarn.policy.rest.ssl.config.file" : "/etc/hadoop/conf/ranger-policymgr-ssl-yarn.xml",
          "ranger.plugin.yarn.policy.source.impl" : "org.apache.ranger.admin.client.RangerAdminRESTClient",
          "ranger.plugin.yarn.policy.cache.dir" : "/etc/ranger/{{repo_name}}/policycache",
          "ranger.plugin.yarn.policy.pollIntervalMs" : "30000",
          "ranger.plugin.yarn.policy.rest.url" : "{{policymgr_mgr_url}}",
          "ranger.plugin.yarn.service.name" : "{{repo_name}}"
        }
      }
    },
    {
      "hadoop-policy" : {
        "properties_attributes" : { },
        "properties" : {
          "security.inter.datanode.protocol.acl" : "*",
          "security.refresh.usertogroups.mappings.protocol.acl" : "hadoop",
          "security.admin.operations.protocol.acl" : "hadoop",
          "security.client.datanode.protocol.acl" : "*",
          "security.datanode.protocol.acl" : "*",
          "security.inter.tracker.protocol.acl" : "*",
          "security.job.client.protocol.acl" : "*",
          "security.client.protocol.acl" : "*",
          "security.job.task.protocol.acl" : "*",
          "security.refresh.policy.protocol.acl" : "hadoop",
          "security.namenode.protocol.acl" : "*"
        }
      }
    },
    {
      "ranger-yarn-audit" : {
        "properties_attributes" : { },
        "properties" : {
          "xasecure.audit.destination.hdfs.batch.filespool.dir" : "/var/log/hadoop/yarn/audit/hdfs/spool",
          "xasecure.audit.is.enabled" : "true",
          "xasecure.audit.jaas.Client.option.keyTab" : "/etc/security/keytabs/rm.service.keytab",
          "xasecure.audit.destination.hdfs" : "true",
          "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
          "xasecure.audit.jaas.Client.option.serviceName" : "solr",
          "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
          "xasecure.audit.jaas.Client.option.useKeyTab" : "true",
          "xasecure.audit.destination.solr.batch.filespool.dir" : "/var/log/hadoop/yarn/audit/solr/spool",
          "xasecure.audit.destination.hdfs.dir" : "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit",
          "xasecure.audit.jaas.Client.option.principal" : "rm/_HOST@DEVOPS.LOCAL",
          "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
          "xasecure.audit.destination.solr" : "false",
          "xasecure.audit.destination.solr.zookeepers" : "NONE",
          "xasecure.audit.provider.summary.enabled" : "false",
          "xasecure.audit.jaas.Client.option.storeKey" : "false",
          "xasecure.audit.destination.solr.urls" : ""
        }
      }
    },
    {
      "core-site" : {
        "properties_attributes" : {
          "final" : {
            "fs.defaultFS" : "true"
          }
        },
        "properties" : {
          "fs.defaultFS" : "hdfs://%HOSTGROUP::host_group_2%:8020",
          "hadoop.proxyuser.ambari-server-devops.hosts" : "ambari.devops.local",
          "ha.failover-controller.active-standby-elector.zk.op.retries" : "120",
          "hadoop.security.authentication" : "kerberos",
          "hadoop.proxyuser.ambari-server-devops.groups" : "*",
          "ipc.server.tcpnodelay" : "true",
          "hadoop.proxyuser.hdfs.hosts" : "*",
          "mapreduce.jobtracker.webinterface.trusted" : "false",
          "hadoop.security.auth_to_local" : "RULE:[1:$1@$0](ambari-qa-devops@DEVOPS.LOCAL)s/.*/ambari-qa/\nRULE:[1:$1@$0](hdfs-devops@DEVOPS.LOCAL)s/.*/hdfs/\nRULE:[1:$1@$0](.*@DEVOPS.LOCAL)s/@.*//\nRULE:[2:$1@$0](amshbase@DEVOPS.LOCAL)s/.*/ams/\nRULE:[2:$1@$0](amszk@DEVOPS.LOCAL)s/.*/ams/\nRULE:[2:$1@$0](dn@DEVOPS.LOCAL)s/.*/hdfs/\nRULE:[2:$1@$0](jhs@DEVOPS.LOCAL)s/.*/mapred/\nRULE:[2:$1@$0](nm@DEVOPS.LOCAL)s/.*/yarn/\nRULE:[2:$1@$0](nn@DEVOPS.LOCAL)s/.*/hdfs/\nRULE:[2:$1@$0](rm@DEVOPS.LOCAL)s/.*/yarn/\nRULE:[2:$1@$0](yarn@DEVOPS.LOCAL)s/.*/yarn/\nDEFAULT",
          "ipc.client.connect.max.retries" : "50",
          "hadoop.proxyuser.yarn.groups" : "*",
          "io.file.buffer.size" : "131072",
          "ipc.client.idlethreshold" : "8000",
          "hadoop.proxyuser.hdfs.groups" : "*",
          "fs.trash.interval" : "360",
          "hadoop.http.authentication.simple.anonymous.allowed" : "true",
          "hadoop.security.authorization" : "true",
          "net.topology.script.file.name" : "/etc/hadoop/conf/topology_script.py",
          "io.compression.codecs" : "org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.SnappyCodec",
          "ipc.client.connection.maxidletime" : "30000",
          "hadoop.proxyuser.yarn.hosts" : "%HOSTGROUP::host_group_2%",
          "hadoop.proxyuser.HTTP.groups" : "users",
          "io.serializations" : "org.apache.hadoop.io.serializer.WritableSerialization"
        }
      }
    },
    {
      "ams-hbase-env" : {
        "properties_attributes" : { },
        "properties" : {
          "hbase_master_maxperm_size" : "128",
          "max_open_files_limit" : "32768",
          "regionserver_xmn_size" : "128",
          "hbase_master_heapsize" : "512",
          "hbase_regionserver_xmn_ratio" : "0.2",
          "hbase_master_xmn_size" : "102",
          "content" : "\n# Set environment variables here.\n\n# The java implementation to use. Java 1.6+ required.\nexport JAVA_HOME={{java64_home}}\n\n# HBase Configuration directory\nexport HBASE_CONF_DIR=${HBASE_CONF_DIR:-{{hbase_conf_dir}}}\n\n# Extra Java CLASSPATH elements. Optional.\nadditional_cp={{hbase_classpath_additional}}\nif [  -n \"$additional_cp\" ];\nthen\n  export HBASE_CLASSPATH=${HBASE_CLASSPATH}:$additional_cp\nelse\n  export HBASE_CLASSPATH=${HBASE_CLASSPATH}\nfi\n\n# The maximum amount of heap to use for hbase shell.\nexport HBASE_SHELL_OPTS=\"-Xmx256m\"\n\n# Extra Java runtime options.\n# Below are what we set by default. May only work with SUN JVM.\n# For more on why as well as other possible settings,\n# see http://wiki.apache.org/hadoop/PerformanceTuning\nexport HBASE_OPTS=\"-XX:+UseConcMarkSweepGC -XX:ErrorFile={{hbase_log_dir}}/hs_err_pid%p.log -Djava.io.tmpdir={{hbase_tmp_dir}}\"\nexport SERVER_GC_OPTS=\"-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:{{hbase_log_dir}}/gc.log-`date +'%Y%m%d%H%M'`\"\n# Uncomment below to enable java garbage collection logging.\n# export HBASE_OPTS=\"$HBASE_OPTS -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$HBASE_HOME/logs/gc-hbase.log\"\n\n# Uncomment and adjust to enable JMX exporting\n# See jmxremote.password and jmxremote.access in $JRE_HOME/lib/management to configure remote password access.\n# More details at: http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html\n#\n# export HBASE_JMX_BASE=\"-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n\n{% if java_version < 8 %}\nexport HBASE_MASTER_OPTS=\" -XX:PermSize=64m -XX:MaxPermSize={{hbase_master_maxperm_size}} -Xms{{hbase_heapsize}} -Xmx{{hbase_heapsize}} -Xmn{{hbase_master_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly\"\nexport HBASE_REGIONSERVER_OPTS=\"-XX:MaxPermSize=128m -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}}\"\n{% else %}\nexport HBASE_MASTER_OPTS=\" -Xms{{hbase_heapsize}} -Xmx{{hbase_heapsize}} -Xmn{{hbase_master_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly\"\nexport HBASE_REGIONSERVER_OPTS=\" -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}}\"\n{% endif %}\n\n\n# export HBASE_THRIFT_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10103\"\n# export HBASE_ZOOKEEPER_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10104\"\n\n# File naming hosts on which HRegionServers will run. $HBASE_HOME/conf/regionservers by default.\nexport HBASE_REGIONSERVERS=${HBASE_CONF_DIR}/regionservers\n\n# Extra ssh options. Empty by default.\n# export HBASE_SSH_OPTS=\"-o ConnectTimeout=1 -o SendEnv=HBASE_CONF_DIR\"\n\n# Where log files are stored. $HBASE_HOME/logs by default.\nexport HBASE_LOG_DIR={{hbase_log_dir}}\n\n# A string representing this instance of hbase. $USER by default.\n# export HBASE_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes. See 'man nice'.\n# export HBASE_NICENESS=10\n\n# The directory where pid files are stored. /tmp by default.\nexport HBASE_PID_DIR={{hbase_pid_dir}}\n\n# Seconds to sleep between slave commands. Unset by default. This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HBASE_SLAVE_SLEEP=0.1\n\n# Tell HBase whether it should manage it's own instance of Zookeeper or not.\nexport HBASE_MANAGES_ZK=false\n\n{% if security_enabled %}\nexport HBASE_OPTS=\"$HBASE_OPTS -Djava.security.auth.login.config={{client_jaas_config_file}}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Djava.security.auth.login.config={{master_jaas_config_file}}\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Djava.security.auth.login.config={{regionserver_jaas_config_file}}\"\nexport HBASE_ZOOKEEPER_OPTS=\"$HBASE_ZOOKEEPER_OPTS -Djava.security.auth.login.config={{ams_zookeeper_jaas_config_file}}\"\n{% endif %}\n\n# use embedded native libs\n_HADOOP_NATIVE_LIB=\"/usr/lib/ams-hbase/lib/hadoop-native/\"\nexport HBASE_OPTS=\"$HBASE_OPTS -Djava.library.path=${_HADOOP_NATIVE_LIB}\"\n\n# Unset HADOOP_HOME to avoid importing HADOOP installed cluster related configs like: /usr/hdp/2.2.0.0-2041/hadoop/conf/\nexport HADOOP_HOME={{ams_hbase_home_dir}}\n\n# Explicitly Setting HBASE_HOME for AMS HBase so that there is no conflict\nexport HBASE_HOME={{ams_hbase_home_dir}}",
          "hbase_pid_dir" : "/var/run/ambari-metrics-collector/",
          "hbase_regionserver_shutdown_timeout" : "30",
          "hbase_log_dir" : "/var/log/ambari-metrics-collector",
          "hbase_regionserver_heapsize" : "768",
          "hbase_classpath_additional" : ""
        }
      }
    },
    {
      "ams-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Define some default values that can be overridden by system properties\nams.log.dir=.\nams.log.file=ambari-metrics-collector.log\n\n# Root logger option\nlog4j.rootLogger=INFO,file\n\n# Direct log messages to a log file\nlog4j.appender.file=org.apache.log4j.RollingFileAppender\nlog4j.appender.file.File=${ams.log.dir}/${ams.log.file}\nlog4j.appender.file.MaxFileSize=80MB\nlog4j.appender.file.MaxBackupIndex=60\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n"
        }
      }
    },
    {
      "hdfs-site" : {
        "properties_attributes" : {
          "final" : {
            "dfs.webhdfs.enabled" : "true",
            "dfs.namenode.http-address" : "true",
            "dfs.support.append" : "true",
            "dfs.namenode.name.dir" : "true",
            "dfs.datanode.failed.volumes.tolerated" : "true",
            "dfs.datanode.data.dir" : "true"
          }
        },
        "properties" : {
          "dfs.replication" : "3",
          "dfs.namenode.keytab.file" : "/etc/security/keytabs/nn.service.keytab",
          "dfs.namenode.audit.log.async" : "true",
          "dfs.namenode.checkpoint.dir" : "/hadoop/hdfs/namesecondary",
          "dfs.namenode.avoid.read.stale.datanode" : "true",
          "dfs.journalnode.http-address" : "0.0.0.0:8480",
          "nfs.file.dump.dir" : "/tmp/.hdfs-nfs",
          "dfs.namenode.rpc-address" : "%HOSTGROUP::host_group_2%:8020",
          "dfs.namenode.https-address" : "%HOSTGROUP::host_group_2%:50470",
          "dfs.web.authentication.kerberos.principal" : "HTTP/_HOST@DEVOPS.LOCAL",
          "dfs.secondary.namenode.kerberos.principal" : "nn/_HOST@DEVOPS.LOCAL",
          "dfs.encrypt.data.transfer.cipher.suites" : "AES/CTR/NoPadding",
          "dfs.client.read.shortcircuit.streams.cache.size" : "4096",
          "dfs.hosts.exclude" : "/etc/hadoop/conf/dfs.exclude",
          "dfs.namenode.kerberos.internal.spnego.principal" : "HTTP/_HOST@DEVOPS.LOCAL",
          "dfs.secondary.namenode.keytab.file" : "/etc/security/keytabs/nn.service.keytab",
          "dfs.datanode.keytab.file" : "/etc/security/keytabs/dn.service.keytab",
          "dfs.namenode.accesstime.precision" : "0",
          "dfs.namenode.fslock.fair" : "false",
          "dfs.web.authentication.kerberos.keytab" : "/etc/security/keytabs/spnego.service.keytab",
          "dfs.permissions.enabled" : "true",
          "dfs.datanode.balance.bandwidthPerSec" : "6250000",
          "dfs.namenode.stale.datanode.interval" : "30000",
          "dfs.secondary.namenode.kerberos.internal.spnego.principal" : "HTTP/_HOST@DEVOPS.LOCAL",
          "dfs.content-summary.limit" : "5000",
          "dfs.http.policy" : "HTTP_ONLY",
          "dfs.journalnode.https-address" : "0.0.0.0:8481",
          "dfs.datanode.du.reserved" : "1073741824",
          "dfs.datanode.kerberos.principal" : "dn/_HOST@DEVOPS.LOCAL",
          "dfs.domain.socket.path" : "/var/lib/hadoop-hdfs/dn_socket",
          "dfs.datanode.ipc.address" : "0.0.0.0:8010",
          "dfs.cluster.administrators" : " hdfs",
          "dfs.datanode.max.transfer.threads" : "1024",
          "dfs.namenode.handler.count" : "100",
          "dfs.https.port" : "50470",
          "dfs.replication.max" : "50",
          "dfs.client.read.shortcircuit" : "true",
          "dfs.webhdfs.enabled" : "true",
          "dfs.namenode.http-address" : "%HOSTGROUP::host_group_2%:50070",
          "dfs.namenode.name.dir" : "/hadoop/hdfs/namenode",
          "dfs.namenode.avoid.write.stale.datanode" : "true",
          "dfs.namenode.kerberos.principal" : "nn/_HOST@DEVOPS.LOCAL",
          "dfs.datanode.https.address" : "0.0.0.0:50475",
          "dfs.datanode.failed.volumes.tolerated" : "0",
          "dfs.client.retry.policy.enabled" : "false",
          "dfs.namenode.startup.delay.block.deletion.sec" : "3600",
          "dfs.block.access.token.enable" : "true",
          "dfs.datanode.data.dir" : "/hadoop/hdfs/data",
          "dfs.permissions.superusergroup" : "hdfs",
          "dfs.blocksize" : "134217728",
          "dfs.namenode.checkpoint.edits.dir" : "${dfs.namenode.checkpoint.dir}",
          "nfs.exports.allowed.hosts" : "* rw",
          "dfs.datanode.address" : "0.0.0.0:1019",
          "dfs.blockreport.initialDelay" : "120",
          "dfs.datanode.data.dir.perm" : "750",
          "dfs.namenode.write.stale.datanode.ratio" : "1.0f",
          "dfs.namenode.name.dir.restore" : "true",
          "dfs.heartbeat.interval" : "3",
          "dfs.namenode.secondary.http-address" : "%HOSTGROUP::host_group_2%:50090",
          "dfs.namenode.checkpoint.txns" : "1000000",
          "dfs.journalnode.edits.dir" : "/hadoop/hdfs/journalnode",
          "dfs.support.append" : "true",
          "fs.permissions.umask-mode" : "022",
          "dfs.namenode.safemode.threshold-pct" : "0.999",
          "dfs.namenode.checkpoint.period" : "21600",
          "dfs.datanode.http.address" : "0.0.0.0:1022"
        }
      }
    },
    {
      "ams-ssl-server" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.server.truststore.location" : "/etc/security/serverKeys/all.jks",
          "ssl.server.truststore.reload.interval" : "10000",
          "ssl.server.truststore.type" : "jks",
          "ssl.server.keystore.location" : "/etc/security/serverKeys/keystore.jks",
          "ssl.server.keystore.type" : "jks"
        }
      }
    },
    {
      "yarn-site" : {
        "properties_attributes" : { },
        "properties" : {
          "yarn.resourcemanager.zk-address" : "%HOSTGROUP::host_group_2%:2181",
          "yarn.nodemanager.container-monitor.interval-ms" : "3000",
          "yarn.resourcemanager.webapp.spnego-principal" : "HTTP/_HOST@DEVOPS.LOCAL",
          "yarn.timeline-service.entity-group-fs-store.active-dir" : "/ats/active/",
          "yarn.timeline-service.http-authentication.signer.secret.provider.object" : "",
          "yarn.resourcemanager.proxyusers.*.users" : "",
          "yarn.nodemanager.linux-container-executor.group" : "hadoop",
          "yarn.application.classpath" : "$HADOOP_CONF_DIR,/usr/hdp/current/hadoop-client/*,/usr/hdp/current/hadoop-client/lib/*,/usr/hdp/current/hadoop-hdfs-client/*,/usr/hdp/current/hadoop-hdfs-client/lib/*,/usr/hdp/current/hadoop-yarn-client/*,/usr/hdp/current/hadoop-yarn-client/lib/*",
          "yarn.timeline-service.http-authentication.token.validity" : "",
          "yarn.admin.acl" : "yarn,dr.who",
          "yarn.timeline-service.entity-group-fs-store.cleaner-interval-seconds" : "3600",
          "yarn.nodemanager.remote-app-log-dir-suffix" : "logs",
          "yarn.nodemanager.address" : "0.0.0.0:45454",
          "yarn.resourcemanager.webapp.address" : "%HOSTGROUP::host_group_2%:8088",
          "yarn.timeline-service.leveldb-timeline-store.ttl-interval-ms" : "300000",
          "yarn.scheduler.maximum-allocation-vcores" : "8",
          "yarn.timeline-service.http-authentication.kerberos.keytab" : "/etc/security/keytabs/spnego.service.keytab",
          "yarn.timeline-service.address" : "%HOSTGROUP::host_group_2%:10200",
          "yarn.timeline-service.enabled" : "true",
          "yarn.nodemanager.aux-services" : "mapreduce_shuffle,spark_shuffle,spark2_shuffle",
          "yarn.nodemanager.resource.cpu-vcores" : "8",
          "yarn.resourcemanager.webapp.delegation-token-auth-filter.enabled" : "false",
          "yarn.nodemanager.aux-services.spark_shuffle.class" : "org.apache.spark.network.yarn.YarnShuffleService",
          "yarn.nodemanager.log-aggregation.debug-enabled" : "false",
          "yarn.resourcemanager.zk-acl" : "world:anyone:rwcda",
          "yarn.resourcemanager.webapp.spnego-keytab-file" : "/etc/security/keytabs/spnego.service.keytab",
          "yarn.timeline-service.http-authentication.kerberos.principal" : "HTTP/_HOST@DEVOPS.LOCAL",
          "yarn.client.nodemanager-connect.max-wait-ms" : "60000",
          "yarn.http.policy" : "HTTP_ONLY",
          "yarn.timeline-service.http-authentication.simple.anonymous.allowed" : "true",
          "yarn.resourcemanager.zk-state-store.parent-path" : "/rmstore",
          "yarn.timeline-service.leveldb-timeline-store.start-time-read-cache-size" : "10000",
          "yarn.nodemanager.keytab" : "/etc/security/keytabs/nm.service.keytab",
          "yarn.resourcemanager.admin.address" : "%HOSTGROUP::host_group_2%:8141",
          "yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage" : "false",
          "yarn.resourcemanager.resource-tracker.address" : "%HOSTGROUP::host_group_2%:8025",
          "yarn.nodemanager.delete.debug-delay-sec" : "0",
          "yarn.resourcemanager.fs.state-store.retry-policy-spec" : "2000, 500",
          "yarn.timeline-service.http-authentication.type" : "kerberos",
          "yarn.timeline-service.ttl-enable" : "true",
          "yarn.timeline-service.entity-group-fs-store.retain-seconds" : "604800",
          "yarn.log-aggregation.retain-seconds" : "2592000",
          "yarn.nodemanager.resource.memory-mb" : "5120",
          "yarn.nodemanager.disk-health-checker.min-healthy-disks" : "0.25",
          "yarn.node-labels.enabled" : "false",
          "yarn.nodemanager.log.retain-second" : "604800",
          "yarn.resourcemanager.connect.max-wait.ms" : "900000",
          "yarn.resourcemanager.proxyusers.*.groups" : "",
          "yarn.resourcemanager.zk-num-retries" : "1000",
          "yarn.scheduler.minimum-allocation-vcores" : "1",
          "yarn.nodemanager.aux-services.spark2_shuffle.classpath" : "{{stack_root}}/${hdp.version}/spark2/aux/*",
          "yarn.resourcemanager.scheduler.class" : "org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler",
          "yarn.resourcemanager.system-metrics-publisher.enabled" : "true",
          "yarn.timeline-service.client.max-retries" : "30",
          "yarn.timeline-service.client.retry-interval-ms" : "1000",
          "yarn.nodemanager.webapp.spnego-keytab-file" : "/etc/security/keytabs/spnego.service.keytab",
          "yarn.nodemanager.webapp.spnego-principal" : "HTTP/_HOST@DEVOPS.LOCAL",
          "yarn.timeline-service.http-authentication.kerberos.name.rules" : "",
          "yarn.timeline-service.store-class" : "org.apache.hadoop.yarn.server.timeline.EntityGroupFSTimelineStore",
          "yarn.timeline-service.bind-host" : "0.0.0.0",
          "yarn.nodemanager.container-metrics.unregister-delay-ms" : "60000",
          "yarn.timeline-service.generic-application-history.store-class" : "org.apache.hadoop.yarn.server.applicationhistoryservice.NullApplicationHistoryStore",
          "yarn.resourcemanager.fs.state-store.uri" : " ",
          "yarn.nodemanager.linux-container-executor.cgroups.hierarchy" : "hadoop-yarn",
          "yarn.timeline-service.http-authentication.proxyusers.*.hosts" : "",
          "yarn.resourcemanager.recovery.enabled" : "true",
          "yarn.timeline-service.entity-group-fs-store.group-id-plugin-classpath" : "",
          "yarn.resourcemanager.scheduler.address" : "%HOSTGROUP::host_group_2%:8030",
          "yarn.timeline-service.leveldb-timeline-store.start-time-write-cache-size" : "10000",
          "yarn.timeline-service.ttl-ms" : "2678400000",
          "yarn.nodemanager.health-checker.script.timeout-ms" : "60000",
          "yarn.timeline-service.http-authentication.proxyusers.*.users" : "",
          "yarn.nodemanager.aux-services.spark2_shuffle.class" : "org.apache.spark.network.yarn.YarnShuffleService",
          "yarn.log.server.url" : "http://%HOSTGROUP::host_group_2%:19888/jobhistory/logs",
          "yarn.timeline-service.entity-group-fs-store.group-id-plugin-classes" : "",
          "yarn.resourcemanager.address" : "%HOSTGROUP::host_group_2%:8050",
          "yarn.timeline-service.recovery.enabled" : "true",
          "yarn.nodemanager.recovery.dir" : "{{yarn_log_dir_prefix}}/nodemanager/recovery-state",
          "yarn.resourcemanager.scheduler.monitor.enable" : "false",
          "hadoop.registry.rm.enabled" : "false",
          "yarn.resourcemanager.bind-host" : "0.0.0.0",
          "yarn.resourcemanager.keytab" : "/etc/security/keytabs/rm.service.keytab",
          "yarn.nodemanager.log-aggregation.num-log-files-per-app" : "30",
          "yarn.timeline-service.http-authentication.cookie.path" : "",
          "yarn.nodemanager.admin-env" : "MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX",
          "yarn.nodemanager.linux-container-executor.cgroups.mount-path" : "",
          "yarn.resourcemanager.system-metrics-publisher.dispatcher.pool-size" : "10",
          "yarn.nodemanager.principal" : "nm/_HOST@DEVOPS.LOCAL",
          "yarn.resourcemanager.proxy-user-privileges.enabled" : "true",
          "yarn.acl.enable" : "true",
          "yarn.resourcemanager.ha.enabled" : "false",
          "yarn.resourcemanager.proxyusers.*.hosts" : "",
          "yarn.client.nodemanager-connect.retry-interval-ms" : "10000",
          "yarn.timeline-service.version" : "1.5",
          "yarn.nodemanager.linux-container-executor.resources-handler.class" : "org.apache.hadoop.yarn.server.nodemanager.util.DefaultLCEResourcesHandler",
          "yarn.timeline-service.leveldb-timeline-store.read-cache-size" : "104857600",
          "yarn.nodemanager.local-dirs" : "/hadoop/yarn/local",
          "yarn.timeline-service.leveldb-timeline-store.path" : "/hadoop/yarn/timeline",
          "yarn.nodemanager.recovery.enabled" : "true",
          "yarn.resourcemanager.zk-timeout-ms" : "10000",
          "yarn.resourcemanager.am.max-attempts" : "2",
          "yarn.resourcemanager.state-store.max-completed-applications" : "${yarn.resourcemanager.max-completed-applications}",
          "yarn.nodemanager.linux-container-executor.cgroups.mount" : "false",
          "yarn.node-labels.fs-store.root-dir" : "/system/yarn/node-labels",
          "yarn.node-labels.fs-store.retry-policy-spec" : "2000, 500",
          "yarn.timeline-service.http-authentication.proxyusers.*.groups" : "",
          "yarn.nodemanager.aux-services.mapreduce_shuffle.class" : "org.apache.hadoop.mapred.ShuffleHandler",
          "yarn.log-aggregation-enable" : "true",
          "yarn.resourcemanager.work-preserving-recovery.enabled" : "true",
          "yarn.timeline-service.principal" : "yarn/_HOST@DEVOPS.LOCAL",
          "yarn.nodemanager.aux-services.spark_shuffle.classpath" : "{{stack_root}}/${hdp.version}/spark/aux/*",
          "yarn.resourcemanager.store.class" : "org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore",
          "yarn.timeline-service.http-authentication.signature.secret.file" : "",
          "yarn.timeline-service.leveldb-state-store.path" : "/hadoop/yarn/timeline",
          "yarn.timeline-service.entity-group-fs-store.done-dir" : "/ats/done/",
          "yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage" : "90",
          "hadoop.registry.zk.quorum" : "%HOSTGROUP::host_group_2%:2181",
          "yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds" : "3600",
          "yarn.nodemanager.container-executor.class" : "org.apache.hadoop.yarn.server.nodemanager.LinuxContainerExecutor",
          "yarn.resourcemanager.nodes.exclude-path" : "/etc/hadoop/conf/yarn.exclude",
          "yarn.timeline-service.state-store-class" : "org.apache.hadoop.yarn.server.timeline.recovery.LeveldbTimelineStateStore",
          "yarn.nodemanager.bind-host" : "0.0.0.0",
          "yarn.resourcemanager.hostname" : "%HOSTGROUP::host_group_2%",
          "yarn.resourcemanager.connect.retry-interval.ms" : "30000",
          "yarn.timeline-service.webapp.address" : "%HOSTGROUP::host_group_2%:8188",
          "yarn.resourcemanager.principal" : "rm/_HOST@DEVOPS.LOCAL",
          "yarn.scheduler.minimum-allocation-mb" : "512",
          "yarn.timeline-service.entity-group-fs-store.summary-store" : "org.apache.hadoop.yarn.server.timeline.RollingLevelDBTimelineStore",
          "yarn.nodemanager.health-checker.interval-ms" : "135000",
          "yarn.nodemanager.disk-health-checker.min-free-space-per-disk-mb" : "1000",
          "yarn.resourcemanager.zk-retry-interval-ms" : "1000",
          "yarn.timeline-service.keytab" : "/etc/security/keytabs/yarn.service.keytab",
          "yarn.nodemanager.remote-app-log-dir" : "/app-logs",
          "yarn.scheduler.maximum-allocation-mb" : "5120",
          "yarn.nodemanager.vmem-check-enabled" : "false",
          "yarn.timeline-service.entity-group-fs-store.scan-interval-seconds" : "60",
          "yarn.resourcemanager.webapp.https.address" : "%HOSTGROUP::host_group_2%:8090",
          "yarn.timeline-service.webapp.https.address" : "%HOSTGROUP::host_group_2%:8190",
          "yarn.nodemanager.resource.percentage-physical-cpu-limit" : "80",
          "yarn.timeline-service.http-authentication.signer.secret.provider" : "",
          "yarn.nodemanager.vmem-pmem-ratio" : "2.1",
          "yarn.nodemanager.log-aggregation.compression-type" : "gz",
          "yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms" : "10000",
          "yarn.nodemanager.log-dirs" : "/hadoop/yarn/log",
          "yarn.timeline-service.http-authentication.cookie.domain" : ""
        }
      }
    },
    {
      "ams-hbase-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# Define some default values that can be overridden by system properties\nhbase.root.logger=INFO,console\nhbase.security.logger=INFO,console\nhbase.log.dir=.\nhbase.log.file=hbase.log\n\n# Define the root logger to the system property \"hbase.root.logger\".\nlog4j.rootLogger=${hbase.root.logger}\n\n# Logging Threshold\nlog4j.threshold=ALL\n\n#\n# Daily Rolling File Appender\n#\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hbase.log.dir}/${hbase.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Rolling File Appender properties\nhbase.log.maxfilesize=256MB\nhbase.log.maxbackupindex=20\n\n# Rolling File Appender\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hbase.log.dir}/${hbase.log.file}\n\nlog4j.appender.RFA.MaxFileSize=${hbase.log.maxfilesize}\nlog4j.appender.RFA.MaxBackupIndex=${hbase.log.maxbackupindex}\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n#\n# Security audit appender\n#\nhbase.security.log.file=SecurityAuth.audit\nhbase.security.log.maxfilesize=256MB\nhbase.security.log.maxbackupindex=20\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hbase.log.dir}/${hbase.security.log.file}\nlog4j.appender.RFAS.MaxFileSize=${hbase.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hbase.security.log.maxbackupindex}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.category.SecurityLogger=${hbase.security.logger}\nlog4j.additivity.SecurityLogger=false\n#log4j.logger.SecurityLogger.org.apache.hadoop.hbase.security.access.AccessController=TRACE\n\n#\n# Null Appender\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Custom Logging levels\n\nlog4j.logger.org.apache.zookeeper=INFO\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.hbase=INFO\n# Make these two classes INFO-level. Make them DEBUG to see more zk debug.\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZKUtil=INFO\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher=INFO\n#log4j.logger.org.apache.hadoop.dfs=DEBUG\n# Set this class to log INFO only otherwise its OTT\n# Enable this to get detailed connection error/retry logging.\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=TRACE\n\n\n# Uncomment this line to enable tracing on _every_ RPC call (this can be a lot of output)\n#log4j.logger.org.apache.hadoop.ipc.HBaseServer.trace=DEBUG\n\n# Uncomment the below if you want to remove logging of client region caching'\n# and scan of .META. messages\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=INFO\n# log4j.logger.org.apache.hadoop.hbase.client.MetaScanner=INFO"
        }
      }
    },
    {
      "kerberos-env" : {
        "properties_attributes" : { },
        "properties" : {
          "password_min_uppercase_letters" : "1",
          "password_min_whitespace" : "0",
          "password_min_punctuation" : "1",
          "manage_auth_to_local" : "true",
          "password_min_digits" : "1",
          "set_password_expiry" : "false",
          "encryption_types" : "aes des3-cbc-sha1 rc4 des-cbc-md5",
          "kdc_create_attributes" : "",
          "create_ambari_principal" : "true",
          "password_min_lowercase_letters" : "1",
          "password_length" : "20",
          "case_insensitive_username_rules" : "false",
          "manage_identities" : "true",
          "password_chat_timeout" : "5",
          "service_check_principal_name" : "${cluster_name|toLower()}-${short_date}",
          "ad_create_attributes_template" : "\n{\n  \"objectClass\": [\"top\", \"person\", \"organizationalPerson\", \"user\"],\n  \"cn\": \"$principal_name\",\n  #if( $is_service )\n  \"servicePrincipalName\": \"$principal_name\",\n  #end\n  \"userPrincipalName\": \"$normalized_principal\",\n  \"unicodePwd\": \"$password\",\n  \"accountExpires\": \"0\",\n  \"userAccountControl\": \"66048\"\n}",
          "install_packages" : "false",
          "ldap_url" : "",
          "executable_search_paths" : "/usr/bin, /usr/kerberos/bin, /usr/sbin, /usr/lib/mit/bin, /usr/lib/mit/sbin",
          "group" : "ambari-managed-principals"
        }
      }
    },
    {
      "ssl-client" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.client.truststore.reload.interval" : "10000",
          "ssl.client.keystore.location" : "/etc/security/clientKeys/keystore.jks",
          "ssl.client.truststore.location" : "/etc/security/clientKeys/all.jks",
          "ssl.client.truststore.type" : "jks",
          "ssl.client.keystore.type" : "jks"
        }
      }
    },
    {
      "ams-ssl-client" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.client.truststore.type" : "jks",
          "ssl.client.truststore.location" : "/etc/security/clientKeys/all.jks"
        }
      }
    },
    {
      "ams-hbase-policy" : {
        "properties_attributes" : { },
        "properties" : {
          "security.masterregion.protocol.acl" : "*",
          "security.admin.protocol.acl" : "*",
          "security.client.protocol.acl" : "*"
        }
      }
    },
    {
      "ranger-hdfs-security" : {
        "properties_attributes" : { },
        "properties" : {
          "xasecure.add-hadoop-authorization" : "true",
          "ranger.plugin.hdfs.policy.rest.ssl.config.file" : "/etc/hadoop/conf/ranger-policymgr-ssl.xml",
          "ranger.plugin.hdfs.policy.source.impl" : "org.apache.ranger.admin.client.RangerAdminRESTClient",
          "ranger.plugin.hdfs.policy.cache.dir" : "/etc/ranger/{{repo_name}}/policycache",
          "ranger.plugin.hdfs.policy.pollIntervalMs" : "30000",
          "ranger.plugin.hdfs.service.name" : "{{repo_name}}",
          "ranger.plugin.hdfs.policy.rest.url" : "{{policymgr_mgr_url}}"
        }
      }
    },
    {
      "ams-grafana-ini" : {
        "properties_attributes" : { },
        "properties" : {
          "protocol" : "http",
          "cert_key" : "/etc/ambari-metrics-grafana/conf/ams-grafana.key",
          "port" : "3000",
          "content" : "\n##################### Grafana Configuration Example #####################\n#\n# Everything has defaults so you only need to uncomment things you want to\n# change\n\n# possible values : production, development\n; app_mode = production\n\n#################################### Paths ####################################\n[paths]\n# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)\n#\n;data = /var/lib/grafana\ndata = {{ams_grafana_data_dir}}\n#\n# Directory where grafana can store logs\n#\n;logs = /var/log/grafana\nlogs = {{ams_grafana_log_dir}}\n\n\n#################################### Server ####################################\n[server]\n# Protocol (http or https)\n;protocol = http\nprotocol = {{ams_grafana_protocol}}\n# The ip address to bind to, empty will bind to all interfaces\n;http_addr =\n\n# The http port  to use\n;http_port = 3000\nhttp_port = {{ams_grafana_port}}\n\n# The public facing domain name used to access grafana from a browser\n;domain = localhost\n\n# Redirect to correct domain if host header does not match domain\n# Prevents DNS rebinding attacks\n;enforce_domain = false\n\n# The full public facing url\n;root_url = %(protocol)s://%(domain)s:%(http_port)s/\n\n# Log web requests\n;router_logging = false\n\n# the path relative working path\n;static_root_path = public\nstatic_root_path = /usr/lib/ambari-metrics-grafana/public\n\n# enable gzip\n;enable_gzip = false\n\n# https certs & key file\n;cert_file =\n;cert_key =\ncert_file = {{ams_grafana_cert_file}}\ncert_key = {{ams_grafana_cert_key}}\n\n#################################### Database ####################################\n[database]\n# Either \"mysql\", \"postgres\" or \"sqlite3\", it's your choice\n;type = sqlite3\n;host = 127.0.0.1:3306\n;name = grafana\n;user = root\n;password =\n\n# For \"postgres\" only, either \"disable\", \"require\" or \"verify-full\"\n;ssl_mode = disable\n\n# For \"sqlite3\" only, path relative to data_path setting\n;path = grafana.db\n\n#################################### Session ####################################\n[session]\n# Either \"memory\", \"file\", \"redis\", \"mysql\", \"postgres\", default is \"file\"\n;provider = file\n\n# Provider config options\n# memory: not have any config yet\n# file: session dir path, is relative to grafana data_path\n# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`\n# mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`\n# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable\n;provider_config = sessions\n\n# Session cookie name\n;cookie_name = grafana_sess\n\n# If you use session in https only, default is false\n;cookie_secure = false\n\n# Session life time, default is 86400\n;session_life_time = 86400\n\n#################################### Analytics ####################################\n[analytics]\n# Server reporting, sends usage counters to stats.grafana.org every 24 hours.\n# No ip addresses are being tracked, only simple counters to track\n# running instances, dashboard and error counts. It is very helpful to us.\n# Change this option to false to disable reporting.\n;reporting_enabled = true\n\n# Google Analytics universal tracking code, only enabled if you specify an id here\n;google_analytics_ua_id =\n\n#################################### Security ####################################\n[security]\n# default admin user, created on startup\nadmin_user = {{ams_grafana_admin_user}}\n\n# default admin password, can be changed before first start of grafana,  or in profile settings\nadmin_password = {{ams_grafana_admin_pwd}}\n\n# used for signing\n;secret_key = SW2YcwTIb9zpOOhoPsMm\n\n# Auto-login remember days\n;login_remember_days = 7\n;cookie_username = grafana_user\n;cookie_remember_name = grafana_remember\n\n# disable gravatar profile images\n;disable_gravatar = false\n\n# data source proxy whitelist (ip_or_domain:port seperated by spaces)\n;data_source_proxy_whitelist =\n\n#################################### Users ####################################\n[users]\n# disable user signup / registration\n;allow_sign_up = true\n\n# Allow non admin users to create organizations\n;allow_org_create = true\n\n# Set to true to automatically assign new users to the default organization (id 1)\n;auto_assign_org = true\n\n# Default role new users will be automatically assigned (if disabled above is set to true)\n;auto_assign_org_role = Viewer\n\n# Background text for the user field on the login page\n;login_hint = email or username\n\n#################################### Anonymous Auth ##########################\n[auth.anonymous]\n# enable anonymous access\nenabled = true\n\n# specify organization name that should be used for unauthenticated users\norg_name = Main Org.\n\n# specify role for unauthenticated users\n;org_role = Admin\n\n#################################### Github Auth ##########################\n[auth.github]\n;enabled = false\n;allow_sign_up = false\n;client_id = some_id\n;client_secret = some_secret\n;scopes = user:email,read:org\n;auth_url = https://github.com/login/oauth/authorize\n;token_url = https://github.com/login/oauth/access_token\n;api_url = https://api.github.com/user\n;team_ids =\n;allowed_organizations =\n\n#################################### Google Auth ##########################\n[auth.google]\n;enabled = false\n;allow_sign_up = false\n;client_id = some_client_id\n;client_secret = some_client_secret\n;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\n;auth_url = https://accounts.google.com/o/oauth2/auth\n;token_url = https://accounts.google.com/o/oauth2/token\n;api_url = https://www.googleapis.com/oauth2/v1/userinfo\n;allowed_domains =\n\n#################################### Auth Proxy ##########################\n[auth.proxy]\n;enabled = false\n;header_name = X-WEBAUTH-USER\n;header_property = username\n;auto_sign_up = true\n\n#################################### Basic Auth ##########################\n[auth.basic]\n;enabled = true\n\n#################################### Auth LDAP ##########################\n[auth.ldap]\n;enabled = false\n;config_file = /etc/grafana/ldap.toml\n\n#################################### SMTP / Emailing ##########################\n[smtp]\n;enabled = false\n;host = localhost:25\n;user =\n;password =\n;cert_file =\n;key_file =\n;skip_verify = false\n;from_address = admin@grafana.localhost\n\n[emails]\n;welcome_email_on_sign_up = false\n\n#################################### Logging ##########################\n[log]\n# Either \"console\", \"file\", default is \"console\"\n# Use comma to separate multiple modes, e.g. \"console, file\"\n;mode = console, file\n\n# Buffer length of channel, keep it as it is if you don't know what it is.\n;buffer_len = 10000\n\n# Either \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Critical\", default is \"Trace\"\n;level = Info\n\n# For \"console\" mode only\n[log.console]\n;level =\n\n# For \"file\" mode only\n[log.file]\n;level =\n# This enables automated log rotate(switch of following options), default is true\n;log_rotate = true\n\n# Max line number of single file, default is 1000000\n;max_lines = 1000000\n\n# Max size shift of single file, default is 28 means 1 << 28, 256MB\n;max_lines_shift = 28\n\n# Segment log daily, default is true\n;daily_rotate = true\n\n# Expired days of log file(delete after max days), default is 7\n;max_days = 7\n\n#################################### AMPQ Event Publisher ##########################\n[event_publisher]\n;enabled = false\n;rabbitmq_url = amqp://localhost/\n;exchange = grafana_events\n\n;#################################### Dashboard JSON files ##########################\n[dashboards.json]\n;enabled = false\n;path = /var/lib/grafana/dashboards\npath = /usr/lib/ambari-metrics-grafana/public/dashboards",
          "cert_file" : "/etc/ambari-metrics-grafana/conf/ams-grafana.crt"
        }
      }
    },
    {
      "ams-hbase-security-site" : {
        "properties_attributes" : { },
        "properties" : {
          "hbase.coprocessor.master.classes" : "org.apache.hadoop.hbase.security.access.AccessController",
          "hbase.myclient.keytab" : "/etc/security/keytabs/ams.collector.keytab",
          "hadoop.security.authentication" : "kerberos",
          "hbase.myclient.principal" : "amshbase/_HOST@DEVOPS.LOCAL",
          "ams.zookeeper.keytab" : "/etc/security/keytabs/ams-zk.service.keytab",
          "hbase.zookeeper.property.jaasLoginRenew" : "3600000",
          "hbase.regionserver.keytab.file" : "/etc/security/keytabs/ams-hbase.regionserver.keytab",
          "hbase.zookeeper.property.authProvider.1" : "org.apache.zookeeper.server.auth.SASLAuthenticationProvider",
          "hbase.regionserver.kerberos.principal" : "amshbase/_HOST@DEVOPS.LOCAL",
          "hbase.zookeeper.property.kerberos.removeHostFromPrincipal" : "true",
          "hbase.coprocessor.region.classes" : "org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.AccessController",
          "hbase.security.authentication" : "kerberos",
          "hbase.master.keytab.file" : "/etc/security/keytabs/ams-hbase.master.keytab",
          "hbase.security.authorization" : "true",
          "hbase.zookeeper.property.kerberos.removeRealmFromPrincipal" : "true",
          "hbase.master.kerberos.principal" : "amshbase/_HOST@DEVOPS.LOCAL",
          "ams.zookeeper.principal" : "amszk/_HOST@DEVOPS.LOCAL"
        }
      }
    },
    {
      "ranger-yarn-plugin-properties" : {
        "properties_attributes" : { },
        "properties" : {
          "ranger-yarn-plugin-enabled" : "No",
          "REPOSITORY_CONFIG_USERNAME" : "yarn",
          "common.name.for.certificate" : "",
          "hadoop.rpc.protection" : "",
          "policy_user" : "ambari-qa"
        }
      }
    },
    {
      "hadoop-env" : {
        "properties_attributes" : { },
        "properties" : {
          "hadoop_heapsize" : "1024",
          "proxyuser_group" : "users",
          "hdfs_user_keytab" : "/etc/security/keytabs/hdfs.headless.keytab",
          "hadoop_root_logger" : "INFO,RFA",
          "dtnode_heapsize" : "1024m",
          "namenode_backup_dir" : "/tmp/upgrades",
          "hdfs_user" : "hdfs",
          "hadoop_pid_dir_prefix" : "/var/run/hadoop",
          "content" : "\n# Set Hadoop-specific environment variables here.\n\n# The only required environment variable is JAVA_HOME.  All others are\n# optional.  When running a distributed configuration it is best to\n# set JAVA_HOME in this file, so that it is correctly defined on\n# remote nodes.\n\n# The java implementation to use.  Required.\nexport JAVA_HOME={{java_home}}\nexport HADOOP_HOME_WARN_SUPPRESS=1\n\n# Hadoop home directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\n# Hadoop Configuration Directory\n\n{# this is different for HDP1 #}\n# Path to jsvc required by secure HDP 2.0 datanode\nexport JSVC_HOME={{jsvc_path}}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\nexport HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\n\nexport HADOOP_NAMENODE_INIT_HEAPSIZE=\"-Xms{{namenode_heapsize}}\"\n\n# Extra Java runtime options.  Empty by default.\nexport HADOOP_OPTS=\"-Djava.net.preferIPv4Stack=true ${HADOOP_OPTS}\"\n\n# Command specific options appended to HADOOP_OPTS when specified\nHADOOP_JOBTRACKER_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{jtnode_opt_newsize}} -XX:MaxNewSize={{jtnode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xmx{{jtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dmapred.audit.logger=INFO,MRAUDIT -Dhadoop.mapreduce.jobsummary.logger=INFO,JSA ${HADOOP_JOBTRACKER_OPTS}\"\n\nHADOOP_TASKTRACKER_OPTS=\"-server -Xmx{{ttnode_heapsize}} -Dhadoop.security.logger=ERROR,console -Dmapred.audit.logger=ERROR,console ${HADOOP_TASKTRACKER_OPTS}\"\n\n{% if java_version < 8 %}\nSHARED_HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT\"\nexport HADOOP_NAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-namenode/bin/kill-name-node\\\" -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_DATANODE_OPTS=\"-server -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -XX:PermSize=128m -XX:MaxPermSize=256m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}\"\n\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-secondarynamenode/bin/kill-secondary-name-node\\\" ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS\"\n\n{% else %}\nSHARED_HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT\"\nexport HADOOP_NAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-namenode/bin/kill-name-node\\\" -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_DATANODE_OPTS=\"-server -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}\"\n\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-secondarynamenode/bin/kill-secondary-name-node\\\" ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m $HADOOP_CLIENT_OPTS\"\n{% endif %}\n\nHADOOP_NFS3_OPTS=\"-Xmx{{nfsgateway_heapsize}}m -Dhadoop.security.logger=ERROR,DRFAS ${HADOOP_NFS3_OPTS}\"\nHADOOP_BALANCER_OPTS=\"-server -Xmx{{hadoop_heapsize}}m ${HADOOP_BALANCER_OPTS}\"\n\n\n# On secure datanodes, user to run the datanode as after dropping privileges\nexport HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER:-{{hadoop_secure_dn_user}}}\n\n# Extra ssh options.  Empty by default.\nexport HADOOP_SSH_OPTS=\"-o ConnectTimeout=5 -o SendEnv=HADOOP_CONF_DIR\"\n\n# Where log files are stored.  $HADOOP_HOME/logs by default.\nexport HADOOP_LOG_DIR={{hdfs_log_dir_prefix}}/$USER\n\n# History server logs\nexport HADOOP_MAPRED_LOG_DIR={{mapred_log_dir_prefix}}/$USER\n\n# Where log files are stored in the secure data environment.\nexport HADOOP_SECURE_DN_LOG_DIR={{hdfs_log_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# File naming remote slave hosts.  $HADOOP_HOME/conf/slaves by default.\n# export HADOOP_SLAVES=${HADOOP_HOME}/conf/slaves\n\n# host:path where hadoop code should be rsync'd from.  Unset by default.\n# export HADOOP_MASTER=master:/home/$USER/src/hadoop\n\n# Seconds to sleep between slave commands.  Unset by default.  This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HADOOP_SLAVE_SLEEP=0.1\n\n# The directory where pid files are stored. /tmp by default.\nexport HADOOP_PID_DIR={{hadoop_pid_dir_prefix}}/$USER\nexport HADOOP_SECURE_DN_PID_DIR={{hadoop_pid_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# History server pid\nexport HADOOP_MAPRED_PID_DIR={{mapred_pid_dir_prefix}}/$USER\n\nYARN_RESOURCEMANAGER_OPTS=\"-Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\"\n\n# A string representing this instance of hadoop. $USER by default.\nexport HADOOP_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes.  See 'man nice'.\n\n# export HADOOP_NICENESS=10\n\n# Add database libraries\nJAVA_JDBC_LIBS=\"\"\nif [ -d \"/usr/share/java\" ]; then\n  for jarFile in `ls /usr/share/java | grep -E \"(mysql|ojdbc|postgresql|sqljdbc)\" 2>/dev/null`\n  do\n    JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\n  done\nfi\n\n# Add libraries to the hadoop classpath - some may not need a colon as they already include it\nexport HADOOP_CLASSPATH=${HADOOP_CLASSPATH}${JAVA_JDBC_LIBS}\n\n# Setting path to hdfs command line\nexport HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n\n# Mostly required for hadoop 2.0\nexport JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}\n\nexport HADOOP_OPTS=\"-Dhdp.version=$HDP_VERSION $HADOOP_OPTS\"\n\n\n# Fix temporary bug, when ulimit from conf files is not picked up, without full relogin. \n# Makes sense to fix only when runing DN as root \nif [ \"$command\" == \"datanode\" ] && [ \"$EUID\" -eq 0 ] && [ -n \"$HADOOP_SECURE_DN_USER\" ]; then\n  {% if is_datanode_max_locked_memory_set %}\n  ulimit -l {{datanode_max_locked_memory}}\n  {% endif %}\n  ulimit -n {{hdfs_user_nofile_limit}}\nfi",
          "hdfs_log_dir_prefix" : "/var/log/hadoop",
          "namenode_opt_newsize" : "200m",
          "namenode_heapsize" : "1024m",
          "hdfs_tmp_dir" : "/tmp",
          "namenode_opt_maxpermsize" : "256m",
          "nfsgateway_heapsize" : "1024",
          "hdfs_user_nofile_limit" : "128000",
          "hdfs_principal_name" : "hdfs-devops@DEVOPS.LOCAL",
          "keyserver_host" : " ",
          "keyserver_port" : "",
          "hdfs_user_nproc_limit" : "65536",
          "namenode_opt_maxnewsize" : "200m",
          "namenode_opt_permsize" : "128m"
        }
      }
    },
    {
      "yarn-env" : {
        "properties_attributes" : { },
        "properties" : {
          "yarn_cgroups_enabled" : "false",
          "yarn_user_nproc_limit" : "65536",
          "yarn_log_dir_prefix" : "/var/log/hadoop-yarn",
          "apptimelineserver_heapsize" : "1024",
          "yarn_user_nofile_limit" : "32768",
          "content" : "\n      export HADOOP_YARN_HOME={{hadoop_yarn_home}}\n      export YARN_LOG_DIR={{yarn_log_dir_prefix}}/$USER\n      export YARN_PID_DIR={{yarn_pid_dir_prefix}}/$USER\n      export HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n      export JAVA_HOME={{java64_home}}\n      export JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\"\n\n      # We need to add the EWMA appender for the yarn daemons only;\n      # however, YARN_ROOT_LOGGER is shared by the yarn client and the\n      # daemons. This is restrict the EWMA appender to daemons only.\n      INVOKER=\"${0##*/}\"\n      if [ \"$INVOKER\" == \"yarn-daemon.sh\" ]; then\n        export YARN_ROOT_LOGGER=${YARN_ROOT_LOGGER:-INFO,EWMA,RFA}\n      fi\n\n      # User for YARN daemons\n      export HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}\n\n      # resolve links - $0 may be a softlink\n      export YARN_CONF_DIR=\"${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}\"\n\n      # some Java parameters\n      # export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n      if [ \"$JAVA_HOME\" != \"\" ]; then\n      #echo \"run java in $JAVA_HOME\"\n      JAVA_HOME=$JAVA_HOME\n      fi\n\n      if [ \"$JAVA_HOME\" = \"\" ]; then\n      echo \"Error: JAVA_HOME is not set.\"\n      exit 1\n      fi\n\n      JAVA=$JAVA_HOME/bin/java\n      JAVA_HEAP_MAX=-Xmx1000m\n\n      # For setting YARN specific HEAP sizes please use this\n      # Parameter and set appropriately\n      YARN_HEAPSIZE={{yarn_heapsize}}\n\n      # check envvars which might override default args\n      if [ \"$YARN_HEAPSIZE\" != \"\" ]; then\n      JAVA_HEAP_MAX=\"-Xmx\"\"$YARN_HEAPSIZE\"\"m\"\n      fi\n\n      # Resource Manager specific parameters\n\n      # Specify the max Heapsize for the ResourceManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1000.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_RESOURCEMANAGER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}\n\n      # Specify the JVM options to be used when starting the ResourceManager.\n      # These options will be appended to the options specified as YARN_OPTS\n      # and therefore may override any similar flags set in YARN_OPTS\n      #export YARN_RESOURCEMANAGER_OPTS=\n\n      # Node Manager specific parameters\n\n      # Specify the max Heapsize for the NodeManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1000.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_NODEMANAGER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}\n\n      # Specify the max Heapsize for the timeline server using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1024.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_TIMELINESERVER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_TIMELINESERVER_HEAPSIZE={{apptimelineserver_heapsize}}\n\n      # Specify the JVM options to be used when starting the NodeManager.\n      # These options will be appended to the options specified as YARN_OPTS\n      # and therefore may override any similar flags set in YARN_OPTS\n      #export YARN_NODEMANAGER_OPTS=\n\n      # so that filenames w/ spaces are handled correctly in loops below\n      IFS=\n\n\n      # default log directory and file\n      if [ \"$YARN_LOG_DIR\" = \"\" ]; then\n      YARN_LOG_DIR=\"$HADOOP_YARN_HOME/logs\"\n      fi\n      if [ \"$YARN_LOGFILE\" = \"\" ]; then\n      YARN_LOGFILE='yarn.log'\n      fi\n\n      # default policy file for service-level authorization\n      if [ \"$YARN_POLICYFILE\" = \"\" ]; then\n      YARN_POLICYFILE=\"hadoop-policy.xml\"\n      fi\n\n      # restore ordinary behaviour\n      unset IFS\n\n\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR\"\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING\"\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\n      export YARN_NODEMANAGER_OPTS=\"$YARN_NODEMANAGER_OPTS -Dnm.audit.logger=INFO,NMAUDIT\"\n      export YARN_RESOURCEMANAGER_OPTS=\"$YARN_RESOURCEMANAGER_OPTS -Drm.audit.logger=INFO,RMAUDIT\"\n      if [ \"x$JAVA_LIBRARY_PATH\" != \"x\" ]; then\n      YARN_OPTS=\"$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH\"\n      fi\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Djava.io.tmpdir={{hadoop_java_io_tmpdir}}\"",
          "is_supported_yarn_ranger" : "true",
          "service_check.queue.name" : "default",
          "resourcemanager_heapsize" : "1024",
          "yarn_pid_dir_prefix" : "/var/run/hadoop-yarn",
          "yarn_user" : "yarn",
          "min_user_id" : "1000",
          "yarn_heapsize" : "1024",
          "nodemanager_heapsize" : "1024"
        }
      }
    },
    {
      "ranger-hdfs-audit" : {
        "properties_attributes" : { },
        "properties" : {
          "xasecure.audit.destination.hdfs.batch.filespool.dir" : "/var/log/hadoop/hdfs/audit/hdfs/spool",
          "xasecure.audit.is.enabled" : "true",
          "xasecure.audit.jaas.Client.option.keyTab" : "/etc/security/keytabs/nn.service.keytab",
          "xasecure.audit.destination.hdfs" : "true",
          "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
          "xasecure.audit.jaas.Client.option.serviceName" : "solr",
          "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
          "xasecure.audit.jaas.Client.option.useKeyTab" : "true",
          "xasecure.audit.destination.solr.batch.filespool.dir" : "/var/log/hadoop/hdfs/audit/solr/spool",
          "xasecure.audit.destination.hdfs.dir" : "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit",
          "xasecure.audit.jaas.Client.option.principal" : "nn/_HOST@DEVOPS.LOCAL",
          "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
          "xasecure.audit.destination.solr" : "false",
          "xasecure.audit.destination.solr.zookeepers" : "NONE",
          "xasecure.audit.provider.summary.enabled" : "false",
          "xasecure.audit.jaas.Client.option.storeKey" : "false",
          "xasecure.audit.destination.solr.urls" : ""
        }
      }
    },
    {
      "ranger-hdfs-plugin-properties" : {
        "properties_attributes" : { },
        "properties" : {
          "REPOSITORY_CONFIG_USERNAME" : "hadoop",
          "ranger-hdfs-plugin-enabled" : "No",
          "common.name.for.certificate" : "",
          "hadoop.rpc.protection" : "authentication",
          "policy_user" : "ambari-qa"
        }
      }
    },
    {
      "zookeeper-env" : {
        "properties_attributes" : { },
        "properties" : {
          "zk_pid_dir" : "/var/run/zookeeper",
          "zookeeper_principal_name" : "zookeeper/_HOST@DEVOPS.LOCAL",
          "zk_log_dir" : "/var/log/zookeeper",
          "zk_user" : "zookeeper",
          "zookeeper_keytab_path" : "/etc/security/keytabs/zk.service.keytab",
          "content" : "\nexport JAVA_HOME={{java64_home}}\nexport ZOOKEEPER_HOME={{zk_home}}\nexport ZOO_LOG_DIR={{zk_log_dir}}\nexport ZOOPIDFILE={{zk_pid_file}}\nexport SERVER_JVMFLAGS={{zk_server_heapsize}}\nexport JAVA=$JAVA_HOME/bin/java\nexport CLASSPATH=$CLASSPATH:/usr/share/zookeeper/*\n\n{% if security_enabled %}\nexport SERVER_JVMFLAGS=\"$SERVER_JVMFLAGS -Djava.security.auth.login.config={{zk_server_jaas_file}}\"\nexport CLIENT_JVMFLAGS=\"$CLIENT_JVMFLAGS -Djava.security.auth.login.config={{zk_client_jaas_file}}\"\n{% endif %}"
        }
      }
    },
    {
      "yarn-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#Relative to Yarn Log Dir Prefix\nyarn.log.dir=.\n#\n# Job Summary Appender\n#\n# Use following logger to send summary to separate file defined by\n# hadoop.mapreduce.jobsummary.log.file rolled daily:\n# hadoop.mapreduce.jobsummary.logger=INFO,JSA\n#\nhadoop.mapreduce.jobsummary.logger=${hadoop.root.logger}\nhadoop.mapreduce.jobsummary.log.file=hadoop-mapreduce.jobsummary.log\nlog4j.appender.JSA=org.apache.log4j.DailyRollingFileAppender\n# Set the ResourceManager summary log filename\nyarn.server.resourcemanager.appsummary.log.file=hadoop-mapreduce.jobsummary.log\n# Set the ResourceManager summary log level and appender\nyarn.server.resourcemanager.appsummary.logger=${hadoop.root.logger}\n#yarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\n\n# To enable AppSummaryLogging for the RM,\n# set yarn.server.resourcemanager.appsummary.logger to\n# LEVEL,RMSUMMARY in hadoop-env.sh\n\n# Appender for ResourceManager Application Summary Log\n# Requires the following properties to be set\n#    - hadoop.log.dir (Hadoop Log directory)\n#    - yarn.server.resourcemanager.appsummary.log.file (resource manager app summary log filename)\n#    - yarn.server.resourcemanager.appsummary.logger (resource manager app summary log level and appender)\nlog4j.appender.RMSUMMARY=org.apache.log4j.RollingFileAppender\nlog4j.appender.RMSUMMARY.File=${yarn.log.dir}/${yarn.server.resourcemanager.appsummary.log.file}\nlog4j.appender.RMSUMMARY.MaxFileSize=256MB\nlog4j.appender.RMSUMMARY.MaxBackupIndex=20\nlog4j.appender.RMSUMMARY.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMSUMMARY.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.JSA.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\nlog4j.appender.JSA.DatePattern=.yyyy-MM-dd\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=${yarn.server.resourcemanager.appsummary.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=false\n\n# Appender for viewing information for errors and warnings\nyarn.ewma.cleanupInterval=300\nyarn.ewma.messageAgeLimitSeconds=86400\nyarn.ewma.maxUniqueMessages=250\nlog4j.appender.EWMA=org.apache.hadoop.yarn.util.Log4jWarningErrorMetricsAppender\nlog4j.appender.EWMA.cleanupInterval=${yarn.ewma.cleanupInterval}\nlog4j.appender.EWMA.messageAgeLimitSeconds=${yarn.ewma.messageAgeLimitSeconds}\nlog4j.appender.EWMA.maxUniqueMessages=${yarn.ewma.maxUniqueMessages}\n\n# Audit logging for ResourceManager\nrm.audit.logger=${hadoop.root.logger}\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger=${rm.audit.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger=false\nlog4j.appender.RMAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.RMAUDIT.File=${yarn.log.dir}/rm-audit.log\nlog4j.appender.RMAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.RMAUDIT.DatePattern=.yyyy-MM-dd\n\n# Audit logging for NodeManager\nnm.audit.logger=${hadoop.root.logger}\nlog4j.logger.org.apache.hadoop.yarn.server.nodemanager.NMAuditLogger=${nm.audit.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.nodemanager.NMAuditLogger=false\nlog4j.appender.NMAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.NMAUDIT.File=${yarn.log.dir}/nm-audit.log\nlog4j.appender.NMAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.NMAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.NMAUDIT.DatePattern=.yyyy-MM-dd"
        }
      }
    },
    {
      "mapred-env" : {
        "properties_attributes" : { },
        "properties" : {
          "jobhistory_heapsize" : "900",
          "mapred_user_nofile_limit" : "32768",
          "mapred_user" : "mapred",
          "mapred_user_nproc_limit" : "65536",
          "mapred_pid_dir_prefix" : "/var/run/hadoop-mapreduce",
          "mapred_log_dir_prefix" : "/var/log/hadoop-mapreduce",
          "content" : "\n# export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n\nexport HADOOP_JOB_HISTORYSERVER_HEAPSIZE={{jobhistory_heapsize}}\n\nexport HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA\n\n#export HADOOP_JOB_HISTORYSERVER_OPTS=\n#export HADOOP_MAPRED_LOG_DIR=\"\" # Where log files are stored.  $HADOOP_MAPRED_HOME/logs by default.\n#export HADOOP_JHS_LOGGER=INFO,RFA # Hadoop JobSummary logger.\n#export HADOOP_MAPRED_PID_DIR= # The pid files are stored. /tmp by default.\n#export HADOOP_MAPRED_IDENT_STRING= #A string representing this instance of hadoop. $USER by default\n#export HADOOP_MAPRED_NICENESS= #The scheduling priority for daemons. Defaults to 0.\nexport HADOOP_OPTS=\"-Dhdp.version=$HDP_VERSION $HADOOP_OPTS\"\nexport HADOOP_OPTS=\"-Djava.io.tmpdir={{hadoop_java_io_tmpdir}} $HADOOP_OPTS\"\nexport JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\""
        }
      }
    },
    {
      "cluster-env" : {
        "properties_attributes" : { },
        "properties" : {
          "recovery_max_count" : "6",
          "manage_dirs_on_root" : "true",
          "managed_hdfs_resource_property_names" : "",
          "recovery_retry_interval" : "5",
          "ambari_principal_name" : "ambari-server-devops@DEVOPS.LOCAL",
          "stack_features" : "{\n  \"stack_features\": [\n    {\n      \"name\": \"snappy\",\n      \"description\": \"Snappy compressor/decompressor support\",\n      \"min_version\": \"2.0.0.0\",\n      \"max_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"lzo\",\n      \"description\": \"LZO libraries support\",\n      \"min_version\": \"2.2.1.0\"\n    },\n    {\n      \"name\": \"express_upgrade\",\n      \"description\": \"Express upgrade support\",\n      \"min_version\": \"2.1.0.0\"\n    },\n    {\n      \"name\": \"rolling_upgrade\",\n      \"description\": \"Rolling upgrade support\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"config_versioning\",\n      \"description\": \"Configurable versions support\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"datanode_non_root\",\n      \"description\": \"DataNode running as non-root support (AMBARI-7615)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"remove_ranger_hdfs_plugin_env\",\n      \"description\": \"HDFS removes Ranger env files (AMBARI-14299)\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"ranger\",\n      \"description\": \"Ranger Service support\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"ranger_tagsync_component\",\n      \"description\": \"Ranger Tagsync component support (AMBARI-14383)\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"phoenix\",\n      \"description\": \"Phoenix Service support\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"nfs\",\n      \"description\": \"NFS support\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"tez_for_spark\",\n      \"description\": \"Tez dependency for Spark\",\n      \"min_version\": \"2.2.0.0\",\n      \"max_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"timeline_state_store\",\n      \"description\": \"Yarn application timeline-service supports state store property (AMBARI-11442)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"copy_tarball_to_hdfs\",\n      \"description\": \"Copy tarball to HDFS support (AMBARI-12113)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"spark_16plus\",\n      \"description\": \"Spark 1.6+\",\n      \"min_version\": \"2.4.0.0\"\n    },\n    {\n      \"name\": \"spark_thriftserver\",\n      \"description\": \"Spark Thrift Server\",\n      \"min_version\": \"2.3.2.0\"\n    },\n    {\n      \"name\": \"storm_kerberos\",\n      \"description\": \"Storm Kerberos support (AMBARI-7570)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"storm_ams\",\n      \"description\": \"Storm AMS integration (AMBARI-10710)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"create_kafka_broker_id\",\n      \"description\": \"Ambari should create Kafka Broker Id (AMBARI-12678)\",\n      \"min_version\": \"2.2.0.0\",\n      \"max_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"kafka_listeners\",\n      \"description\": \"Kafka listeners (AMBARI-10984)\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"kafka_kerberos\",\n      \"description\": \"Kafka Kerberos support (AMBARI-10984)\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"pig_on_tez\",\n      \"description\": \"Pig on Tez support (AMBARI-7863)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"ranger_usersync_non_root\",\n      \"description\": \"Ranger Usersync as non-root user (AMBARI-10416)\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"ranger_audit_db_support\",\n      \"description\": \"Ranger Audit to DB support\",\n      \"min_version\": \"2.2.0.0\",\n      \"max_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"accumulo_kerberos_user_auth\",\n      \"description\": \"Accumulo Kerberos User Auth (AMBARI-10163)\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"knox_versioned_data_dir\",\n      \"description\": \"Use versioned data dir for Knox (AMBARI-13164)\",\n      \"min_version\": \"2.3.2.0\"\n    },\n    {\n      \"name\": \"knox_sso_topology\",\n      \"description\": \"Knox SSO Topology support (AMBARI-13975)\",\n      \"min_version\": \"2.3.8.0\"\n    },\n    {\n      \"name\": \"atlas_rolling_upgrade\",\n      \"description\": \"Rolling upgrade support for Atlas\",\n      \"min_version\": \"2.3.0.0\"\n    },\n    {\n      \"name\": \"oozie_admin_user\",\n      \"description\": \"Oozie install user as an Oozie admin user (AMBARI-7976)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"oozie_create_hive_tez_configs\",\n      \"description\": \"Oozie create configs for Ambari Hive and Tez deployments (AMBARI-8074)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"oozie_setup_shared_lib\",\n      \"description\": \"Oozie setup tools used to shared Oozie lib to HDFS (AMBARI-7240)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"oozie_host_kerberos\",\n      \"description\": \"Oozie in secured clusters uses _HOST in Kerberos principal (AMBARI-9775)\",\n      \"min_version\": \"2.0.0.0\",\n      \"max_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"falcon_extensions\",\n      \"description\": \"Falcon Extension\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"hive_metastore_upgrade_schema\",\n      \"description\": \"Hive metastore upgrade schema support (AMBARI-11176)\",\n      \"min_version\": \"2.3.0.0\"\n     },\n    {\n      \"name\": \"hive_server_interactive\",\n      \"description\": \"Hive server interactive support (AMBARI-15573)\",\n      \"min_version\": \"2.5.0.0\"\n     },\n    {\n      \"name\": \"hive_webhcat_specific_configs\",\n      \"description\": \"Hive webhcat specific configurations support (AMBARI-12364)\",\n      \"min_version\": \"2.3.0.0\"\n     },\n    {\n      \"name\": \"hive_purge_table\",\n      \"description\": \"Hive purge table support (AMBARI-12260)\",\n      \"min_version\": \"2.3.0.0\"\n     },\n    {\n      \"name\": \"hive_server2_kerberized_env\",\n      \"description\": \"Hive server2 working on kerberized environment (AMBARI-13749)\",\n      \"min_version\": \"2.2.3.0\",\n      \"max_version\": \"2.2.5.0\"\n     },\n    {\n      \"name\": \"hive_env_heapsize\",\n      \"description\": \"Hive heapsize property defined in hive-env (AMBARI-12801)\",\n      \"min_version\": \"2.2.0.0\"\n    },\n    {\n      \"name\": \"ranger_kms_hsm_support\",\n      \"description\": \"Ranger KMS HSM support (AMBARI-15752)\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"ranger_log4j_support\",\n      \"description\": \"Ranger supporting log-4j properties (AMBARI-15681)\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"ranger_kerberos_support\",\n      \"description\": \"Ranger Kerberos support\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"hive_metastore_site_support\",\n      \"description\": \"Hive Metastore site support\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"ranger_usersync_password_jceks\",\n      \"description\": \"Saving Ranger Usersync credentials in jceks\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"ranger_install_infra_client\",\n      \"description\": \"Ambari Infra Service support\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"falcon_atlas_support_2_3\",\n      \"description\": \"Falcon Atlas integration support for 2.3 stack\",\n      \"min_version\": \"2.3.99.0\",\n      \"max_version\": \"2.4.0.0\"\n    },\n    {\n      \"name\": \"falcon_atlas_support\",\n      \"description\": \"Falcon Atlas integration\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"hbase_home_directory\",\n      \"description\": \"Hbase home directory in HDFS needed for HBASE backup\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"spark_livy\",\n      \"description\": \"Livy as slave component of spark\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"atlas_ranger_plugin_support\",\n      \"description\": \"Atlas Ranger plugin support\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"atlas_conf_dir_in_path\",\n      \"description\": \"Prepend the Atlas conf dir (/etc/atlas/conf) to the classpath of Storm and Falcon\",\n      \"min_version\": \"2.3.0.0\",\n      \"max_version\": \"2.4.99.99\"\n    },\n    {\n      \"name\": \"atlas_upgrade_support\",\n      \"description\": \"Atlas supports express and rolling upgrades\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"atlas_hook_support\",\n      \"description\": \"Atlas support for hooks in Hive, Storm, Falcon, and Sqoop\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"ranger_pid_support\",\n      \"description\": \"Ranger Service support pid generation AMBARI-16756\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"ranger_kms_pid_support\",\n      \"description\": \"Ranger KMS Service support pid generation\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"ranger_admin_password_change\",\n      \"description\": \"Allow ranger admin credentials to be specified during cluster creation (AMBARI-17000)\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"storm_metrics_apache_classes\",\n      \"description\": \"Metrics sink for Storm that uses Apache class names\",\n      \"min_version\": \"2.5.0.0\"\n    },\n    {\n      \"name\": \"spark_java_opts_support\",\n      \"description\": \"Allow Spark to generate java-opts file\",\n      \"min_version\": \"2.2.0.0\",\n      \"max_version\": \"2.4.0.0\"\n    },\n    {\n      \"name\": \"atlas_hbase_setup\",\n      \"description\": \"Use script to create Atlas tables in Hbase and set permissions for Atlas user.\",\n      \"min_version\": \"2.5.0.0\"\n    }\n  ]\n}",
          "commands_to_retry" : "INSTALL,START",
          "stack_tools" : "{\n  \"stack_selector\": [\"hdp-select\", \"/usr/bin/hdp-select\", \"hdp-select\"],\n  \"conf_selector\": [\"conf-select\", \"/usr/bin/conf-select\", \"conf-select\"]\n}",
          "repo_ubuntu_template" : "{{package_type}} {{base_url}} {{components}}",
          "stack_root" : "/usr/hdp",
          "fetch_nonlocal_groups" : "true",
          "one_dir_per_partition" : "false",
          "kerberos_domain" : "EXAMPLE.COM",
          "ignore_bad_mounts" : "false",
          "user_group" : "hadoop",
          "override_uid" : "true",
          "security_enabled" : "true",
          "recovery_lifetime_max_count" : "1024",
          "recovery_type" : "AUTO_START",
          "repo_suse_rhel_template" : "[{{repo_id}}]\nname={{repo_id}}\n{% if mirror_list %}mirrorlist={{mirror_list}}{% else %}baseurl={{base_url}}{% endif %}\n\npath=/\nenabled=1\ngpgcheck=0",
          "command_retry_enabled" : "true",
          "recovery_enabled" : "true",
          "smokeuser" : "ambari-qa",
          "smokeuser_keytab" : "/etc/security/keytabs/smokeuser.headless.keytab",
          "smokeuser_principal_name" : "ambari-qa-devops@DEVOPS.LOCAL",
          "command_retry_max_time_in_sec" : "600",
          "alerts_repeat_tolerance" : "1",
          "recovery_window_in_minutes" : "60",
          "ignore_groupsusers_create" : "false"
        }
      }
    },
    {
      "ams-grafana-env" : {
        "properties_attributes" : { },
        "properties" : {
          "metrics_grafana_log_dir" : "/var/log/ambari-metrics-grafana",
          "metrics_grafana_pid_dir" : "/var/run/ambari-metrics-grafana",
          "content" : "\n# Set environment variables here.\n\n# AMS UI Server Home Dir\nexport AMS_GRAFANA_HOME_DIR={{ams_grafana_home_dir}}\n\n# AMS UI Server Data Dir\nexport AMS_GRAFANA_DATA_DIR={{ams_grafana_data_dir}}\n\n# AMS UI Server Log Dir\nexport AMS_GRAFANA_LOG_DIR={{ams_grafana_log_dir}}\n\n# AMS UI Server PID Dir\nexport AMS_GRAFANA_PID_DIR={{ams_grafana_pid_dir}}",
          "metrics_grafana_data_dir" : "/var/lib/ambari-metrics-grafana",
          "metrics_grafana_username" : "admin"
        }
      }
    }
  ],
  "host_groups" : [
    {
      "components" : [
        {
          "name" : "SECONDARY_NAMENODE"
        },
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {
          "name" : "HISTORYSERVER"
        },
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "KERBEROS_CLIENT"
        },
        {
          "name" : "NAMENODE"
        },
        {
          "name" : "APP_TIMELINE_SERVER"
        },
        {
          "name" : "METRICS_COLLECTOR"
        },
        {
          "name" : "METRICS_GRAFANA"
        },
        {
          "name" : "RESOURCEMANAGER"
        }
      ],
      "configurations" : [ ],
      "name" : "host_group_2",
      "cardinality" : "1"
    },
    {
      "components" : [
        {
          "name" : "NODEMANAGER"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "DATANODE"
        },
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "KERBEROS_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_CLIENT"
        }
      ],
      "configurations" : [ ],
      "name" : "host_group_1",
      "cardinality" : "1"
    }
  ],
  "Blueprints" : {
    "security" : {
      "type" : "KERBEROS",
      "kerberos_descriptor" : {
        "properties" : {
          "additional_realms" : "",
          "keytab_dir" : "/etc/security/keytabs",
          "realm" : "DEVOPS.LOCAL"
        },
        "identities" : [
          {
            "keytab" : {
              "file" : "${keytab_dir}/ambari.server.keytab"
            },
            "name" : "ambari-server",
            "principal" : {
              "configuration" : "cluster-env/ambari_principal_name",
              "type" : "user",
              "value" : "ambari-server-${cluster_name|toLower()}@${realm}"
            },
            "referencePath" : "ambari-server"
          },
          {
            "keytab" : {
              "configuration" : "cluster-env/smokeuser_keytab",
              "file" : "${keytab_dir}/smokeuser.headless.keytab",
              "group" : {
                "access" : "r",
                "name" : "${cluster-env/user_group}"
              },
              "owner" : {
                "access" : "r",
                "name" : "${cluster-env/smokeuser}"
              }
            },
            "name" : "smokeuser",
            "principal" : {
              "configuration" : "cluster-env/smokeuser_principal_name",
              "local_username" : "${cluster-env/smokeuser}",
              "type" : "user",
              "value" : "${cluster-env/smokeuser}-${cluster_name|toLower()}@${realm}"
            },
            "referencePath" : "smokeuser"
          },
          {
            "keytab" : {
              "file" : "${keytab_dir}/spnego.service.keytab",
              "group" : {
                "access" : "r",
                "name" : "${cluster-env/user_group}"
              },
              "owner" : {
                "access" : "r",
                "name" : "root"
              }
            },
            "name" : "spnego",
            "principal" : {
              "type" : "service",
              "value" : "HTTP/_HOST@${realm}"
            },
            "referencePath" : "spnego"
          }
        ],
        "services" : [
          {
            "components" : [
              {
                "name" : "ACCUMULO_CLIENT"
              },
              {
                "name" : "ACCUMULO_GC"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "ACCUMULO/ACCUMULO_MASTER//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "ACCUMULO_MASTER"
              },
              {
                "name" : "ACCUMULO_MONITOR"
              },
              {
                "name" : "ACCUMULO_TRACER"
              },
              {
                "name" : "ACCUMULO_TSERVER"
              }
            ],
            "configurations" : [
              {
                "accumulo-site" : {
                  "general.delegation.token.lifetime" : "7d",
                  "general.delegation.token.update.interval" : "1d",
                  "instance.rpc.sasl.enabled" : "true",
                  "instance.security.authenticator" : "org.apache.accumulo.server.security.handler.KerberosAuthenticator",
                  "instance.security.authorizor" : "org.apache.accumulo.server.security.handler.KerberosAuthorizor",
                  "instance.security.permissionHandler" : "org.apache.accumulo.server.security.handler.KerberosPermissionHandler",
                  "trace.token.type" : "org.apache.accumulo.core.client.security.tokens.KerberosToken"
                }
              },
              {
                "client" : {
                  "kerberos.server.primary" : "{{bare_accumulo_principal}}"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "ACCUMULO//smokeuser"
              },
              {
                "keytab" : {
                  "configuration" : "accumulo-env/accumulo_user_keytab",
                  "file" : "${keytab_dir}/accumulo.headless.keytab",
                  "group" : {
                    "access" : "r",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${accumulo-env/accumulo_user}"
                  }
                },
                "name" : "accumulo",
                "principal" : {
                  "configuration" : "accumulo-env/accumulo_principal_name",
                  "local_username" : "${accumulo-env/accumulo_user}",
                  "type" : "user",
                  "value" : "${accumulo-env/accumulo_user}-${cluster_name|toLower()}@${realm}"
                },
                "referencePath" : "ACCUMULO/accumulo"
              },
              {
                "keytab" : {
                  "configuration" : "accumulo-site/general.kerberos.keytab",
                  "file" : "${keytab_dir}/accumulo.service.keytab",
                  "group" : {
                    "access" : "",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${accumulo-env/accumulo_user}"
                  }
                },
                "name" : "accumulo_service",
                "principal" : {
                  "configuration" : "accumulo-site/general.kerberos.principal",
                  "local_username" : "${accumulo-env/accumulo_user}",
                  "type" : "service",
                  "value" : "${accumulo-env/accumulo_user}/_HOST@${realm}"
                },
                "referencePath" : "ACCUMULO/accumulo_service"
              },
              {
                "keytab" : {
                  "configuration" : "accumulo-site/trace.token.property.keytab",
                  "file" : "${keytab_dir}/accumulo-tracer.headless.keytab",
                  "group" : {
                    "access" : "",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${accumulo-env/accumulo_user}"
                  }
                },
                "name" : "accumulo_tracer",
                "principal" : {
                  "configuration" : "accumulo-site/trace.user",
                  "local_username" : "${accumulo-env/accumulo_user}",
                  "type" : "user",
                  "value" : "tracer-${cluster_name|toLower()}@${realm}"
                },
                "referencePath" : "ACCUMULO/accumulo_tracer"
              }
            ],
            "name" : "ACCUMULO"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "infra-solr-env/infra_solr_kerberos_keytab",
                      "file" : "${keytab_dir}/ambari-infra-solr.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${infra-solr-env/infra_solr_user}"
                      }
                    },
                    "name" : "infra-solr",
                    "principal" : {
                      "configuration" : "infra-solr-env/infra_solr_kerberos_principal",
                      "type" : "service",
                      "value" : "infra-solr/_HOST@${realm}"
                    },
                    "referencePath" : "AMBARI_INFRA/INFRA_SOLR/infra-solr"
                  }
                ],
                "name" : "INFRA_SOLR"
              },
              {
                "name" : "INFRA_SOLR_CLIENT"
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "AMBARI_INFRA//smokeuser"
              },
              {
                "keytab" : {
                  "configuration" : "infra-solr-env/infra_solr_web_kerberos_keytab"
                },
                "name" : "/spnego",
                "principal" : {
                  "configuration" : "infra-solr-env/infra_solr_web_kerberos_principal"
                },
                "referencePath" : "AMBARI_INFRA//spnego"
              }
            ],
            "name" : "AMBARI_INFRA"
          },
          {
            "components" : [
              {
                "configurations" : [
                  {
                    "ams-hbase-security-site" : {
                      "hadoop.security.authentication" : "kerberos",
                      "hbase.coprocessor.master.classes" : "org.apache.hadoop.hbase.security.access.AccessController",
                      "hbase.coprocessor.region.classes" : "org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.AccessController",
                      "hbase.security.authentication" : "kerberos",
                      "hbase.security.authorization" : "true",
                      "hbase.zookeeper.property.authProvider.1" : "org.apache.zookeeper.server.auth.SASLAuthenticationProvider",
                      "hbase.zookeeper.property.jaasLoginRenew" : "3600000",
                      "hbase.zookeeper.property.kerberos.removeHostFromPrincipal" : "true",
                      "hbase.zookeeper.property.kerberos.removeRealmFromPrincipal" : "true"
                    }
                  },
                  {
                    "ams-hbase-site" : {
                      "zookeeper.znode.parent" : "/ams-hbase-secure"
                    }
                  }
                ],
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "when" : {
                      "contains" : [
                        "services",
                        "HDFS"
                      ]
                    },
                    "referencePath" : "AMBARI_METRICS/METRICS_COLLECTOR//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ams-hbase-security-site/hbase.myclient.keytab",
                      "file" : "${keytab_dir}/ams.collector.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ams-env/ambari_metrics_user}"
                      }
                    },
                    "name" : "ams_collector",
                    "principal" : {
                      "configuration" : "ams-hbase-security-site/hbase.myclient.principal",
                      "local_username" : "${ams-env/ambari_metrics_user}",
                      "type" : "service",
                      "value" : "amshbase/_HOST@${realm}"
                    },
                    "referencePath" : "AMBARI_METRICS/METRICS_COLLECTOR/ams_collector"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ams-hbase-security-site/hbase.master.keytab.file",
                      "file" : "${keytab_dir}/ams-hbase.master.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ams-env/ambari_metrics_user}"
                      }
                    },
                    "name" : "ams_hbase_master_hbase",
                    "principal" : {
                      "configuration" : "ams-hbase-security-site/hbase.master.kerberos.principal",
                      "local_username" : "${ams-env/ambari_metrics_user}",
                      "type" : "service",
                      "value" : "amshbase/_HOST@${realm}"
                    },
                    "referencePath" : "AMBARI_METRICS/METRICS_COLLECTOR/ams_hbase_master_hbase"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ams-hbase-security-site/hbase.regionserver.keytab.file",
                      "file" : "${keytab_dir}/ams-hbase.regionserver.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ams-env/ambari_metrics_user}"
                      }
                    },
                    "name" : "ams_hbase_regionserver_hbase",
                    "principal" : {
                      "configuration" : "ams-hbase-security-site/hbase.regionserver.kerberos.principal",
                      "local_username" : "${ams-env/ambari_metrics_user}",
                      "type" : "service",
                      "value" : "amshbase/_HOST@${realm}"
                    },
                    "referencePath" : "AMBARI_METRICS/METRICS_COLLECTOR/ams_hbase_regionserver_hbase"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ams-hbase-security-site/ams.zookeeper.keytab",
                      "file" : "${keytab_dir}/ams-zk.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ams-env/ambari_metrics_user}"
                      }
                    },
                    "name" : "ams_zookeeper",
                    "principal" : {
                      "configuration" : "ams-hbase-security-site/ams.zookeeper.principal",
                      "local_username" : "${ams-env/ambari_metrics_user}",
                      "type" : "service",
                      "value" : "amszk/_HOST@${realm}"
                    },
                    "referencePath" : "AMBARI_METRICS/METRICS_COLLECTOR/ams_zookeeper"
                  }
                ],
                "name" : "METRICS_COLLECTOR"
              }
            ],
            "identities" : [
              {
                "name" : "/spnego",
                "referencePath" : "AMBARI_METRICS//spnego"
              }
            ],
            "name" : "AMBARI_METRICS"
          },
          {
            "auth_to_local_properties" : [
              "application-properties/atlas.authentication.method.kerberos.name.rules|new_lines_escaped"
            ],
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/KAFKA/KAFKA_BROKER/kafka_broker",
                    "referencePath" : "ATLAS/ATLAS_SERVER//KAFKA/KAFKA_BROKER/kafka_broker"
                  },
                  {
                    "keytab" : {
                      "configuration" : "application-properties/atlas.authentication.method.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "application-properties/atlas.authentication.method.kerberos.principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "ATLAS/ATLAS_SERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "application-properties/atlas.jaas.KafkaClient.option.keyTab",
                      "file" : "${keytab_dir}/atlas.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${atlas-env/metadata_user}"
                      }
                    },
                    "name" : "atlas",
                    "principal" : {
                      "configuration" : "application-properties/atlas.jaas.KafkaClient.option.principal",
                      "local_username" : "${atlas-env/metadata_user}",
                      "type" : "service",
                      "value" : "atlas/_HOST@${realm}"
                    },
                    "referencePath" : "ATLAS/ATLAS_SERVER/atlas"
                  },
                  {
                    "keytab" : {
                      "configuration" : "application-properties/atlas.authentication.keytab"
                    },
                    "name" : "atlas_auth",
                    "principal" : {
                      "configuration" : "application-properties/atlas.authentication.principal"
                    },
                    "reference" : "/ATLAS/ATLAS_SERVER/atlas",
                    "referencePath" : "ATLAS/ATLAS_SERVER/atlas_auth"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ranger-atlas-audit/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "ranger_atlas_audit",
                    "principal" : {
                      "configuration" : "ranger-atlas-audit/xasecure.audit.jaas.Client.option.principal"
                    },
                    "reference" : "/ATLAS/ATLAS_SERVER/atlas",
                    "referencePath" : "ATLAS/ATLAS_SERVER/ranger_atlas_audit"
                  }
                ],
                "name" : "ATLAS_SERVER"
              }
            ],
            "configurations" : [
              {
                "application-properties" : {
                  "atlas.authentication.method.kerberos" : "true",
                  "atlas.jaas.KafkaClient.loginModuleControlFlag" : "required",
                  "atlas.jaas.KafkaClient.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "atlas.jaas.KafkaClient.option.serviceName" : "${kafka-env/kafka_user}",
                  "atlas.jaas.KafkaClient.option.storeKey" : "true",
                  "atlas.jaas.KafkaClient.option.useKeyTab" : "true",
                  "atlas.kafka.sasl.kerberos.service.name" : "${kafka-env/kafka_user}",
                  "atlas.kafka.security.protocol" : "PLAINTEXTSASL",
                  "atlas.solr.kerberos.enable" : "true"
                }
              },
              {
                "ranger-atlas-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              }
            ],
            "name" : "ATLAS"
          },
          {
            "auth_to_local_properties" : [
              "falcon-startup.properties/*.falcon.http.authentication.kerberos.name.rules|new_lines_escaped"
            ],
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "falcon-atlas-application.properties/atlas.jaas.KafkaClient.option.keyTab"
                    },
                    "name" : "/FALCON/FALCON_SERVER/falcon_server",
                    "principal" : {
                      "configuration" : "falcon-atlas-application.properties/atlas.jaas.KafkaClient.option.principal"
                    },
                    "referencePath" : "FALCON/FALCON_SERVER//FALCON/FALCON_SERVER/falcon_server"
                  },
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "FALCON/FALCON_SERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "falcon-startup.properties/*.falcon.http.authentication.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "falcon-startup.properties/*.falcon.http.authentication.kerberos.principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "FALCON/FALCON_SERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "falcon-startup.properties/*.falcon.service.authentication.kerberos.keytab",
                      "file" : "${keytab_dir}/falcon.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${falcon-env/falcon_user}"
                      }
                    },
                    "name" : "falcon_server",
                    "principal" : {
                      "configuration" : "falcon-startup.properties/*.falcon.service.authentication.kerberos.principal",
                      "local_username" : "${falcon-env/falcon_user}",
                      "type" : "service",
                      "value" : "falcon/_HOST@${realm}"
                    },
                    "referencePath" : "FALCON/FALCON_SERVER/falcon_server"
                  }
                ],
                "name" : "FALCON_SERVER"
              }
            ],
            "configurations" : [
              {
                "falcon-startup.properties" : {
                  "*.dfs.namenode.kerberos.principal" : "nn/_HOST@${realm}",
                  "*.falcon.authentication.type" : "kerberos",
                  "*.falcon.http.authentication.type" : "kerberos"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "FALCON//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "FALCON//spnego"
              }
            ],
            "name" : "FALCON"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-hbase-audit/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "/HBASE/HBASE_MASTER/hbase_master_hbase",
                    "principal" : {
                      "configuration" : "ranger-hbase-audit/xasecure.audit.jaas.Client.option.principal"
                    },
                    "referencePath" : "HBASE/HBASE_MASTER//HBASE/HBASE_MASTER/hbase_master_hbase"
                  },
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "HBASE/HBASE_MASTER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hbase-site/hbase.security.authentication.spnego.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "hbase-site/hbase.security.authentication.spnego.kerberos.principal"
                    },
                    "referencePath" : "HBASE/HBASE_MASTER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hbase-site/hbase.master.keytab.file",
                      "file" : "${keytab_dir}/hbase.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hbase-env/hbase_user}"
                      }
                    },
                    "name" : "hbase_master_hbase",
                    "principal" : {
                      "configuration" : "hbase-site/hbase.master.kerberos.principal",
                      "local_username" : "${hbase-env/hbase_user}",
                      "type" : "service",
                      "value" : "hbase/_HOST@${realm}"
                    },
                    "referencePath" : "HBASE/HBASE_MASTER/hbase_master_hbase"
                  }
                ],
                "name" : "HBASE_MASTER"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "hbase-site/hbase.security.authentication.spnego.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "hbase-site/hbase.security.authentication.spnego.kerberos.principal"
                    },
                    "referencePath" : "HBASE/HBASE_REGIONSERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hbase-site/hbase.regionserver.keytab.file",
                      "file" : "${keytab_dir}/hbase.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hbase-env/hbase_user}"
                      }
                    },
                    "name" : "hbase_regionserver_hbase",
                    "principal" : {
                      "configuration" : "hbase-site/hbase.regionserver.kerberos.principal",
                      "local_username" : "${hbase-env/hbase_user}",
                      "type" : "service",
                      "value" : "hbase/_HOST@${realm}"
                    },
                    "referencePath" : "HBASE/HBASE_REGIONSERVER/hbase_regionserver_hbase"
                  }
                ],
                "name" : "HBASE_REGIONSERVER"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "hbase-site/phoenix.queryserver.keytab.file"
                    },
                    "name" : "phoenix_spnego",
                    "principal" : {
                      "configuration" : "hbase-site/phoenix.queryserver.kerberos.principal"
                    },
                    "reference" : "/spnego",
                    "referencePath" : "HBASE/PHOENIX_QUERY_SERVER/phoenix_spnego"
                  }
                ],
                "name" : "PHOENIX_QUERY_SERVER"
              }
            ],
            "configurations" : [
              {
                "hbase-site" : {
                  "hbase.bulkload.staging.dir" : "/apps/hbase/staging",
                  "hbase.coprocessor.master.classes" : "{{hbase_coprocessor_master_classes}}",
                  "hbase.coprocessor.region.classes" : "{{hbase_coprocessor_region_classes}}",
                  "hbase.coprocessor.regionserver.classes" : "{{hbase_coprocessor_regionserver_classes}}",
                  "hbase.master.ui.readonly" : "true",
                  "hbase.security.authentication" : "kerberos",
                  "hbase.security.authorization" : "true",
                  "zookeeper.znode.parent" : "/hbase-secure"
                }
              },
              {
                "ranger-hbase-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "HBASE//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "HBASE//spnego"
              },
              {
                "keytab" : {
                  "configuration" : "hbase-env/hbase_user_keytab",
                  "file" : "${keytab_dir}/hbase.headless.keytab",
                  "group" : {
                    "access" : "r",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${hbase-env/hbase_user}"
                  }
                },
                "name" : "hbase",
                "principal" : {
                  "configuration" : "hbase-env/hbase_principal_name",
                  "local_username" : "${hbase-env/hbase_user}",
                  "type" : "user",
                  "value" : "${hbase-env/hbase_user}-${cluster_name|toLower()}@${realm}"
                },
                "referencePath" : "HBASE/hbase"
              }
            ],
            "name" : "HBASE"
          },
          {
            "auth_to_local_properties" : [
              "core-site/hadoop.security.auth_to_local"
            ],
            "components" : [
              {
                "configurations" : [
                  {
                    "hdfs-site" : {
                      "dfs.datanode.address" : "0.0.0.0:1019",
                      "dfs.datanode.http.address" : "0.0.0.0:1022"
                    }
                  }
                ],
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "hdfs-site/dfs.datanode.keytab.file",
                      "file" : "${keytab_dir}/dn.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hadoop-env/hdfs_user}"
                      }
                    },
                    "name" : "datanode_dn",
                    "principal" : {
                      "configuration" : "hdfs-site/dfs.datanode.kerberos.principal",
                      "local_username" : "${hadoop-env/hdfs_user}",
                      "type" : "service",
                      "value" : "dn/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/DATANODE/datanode_dn"
                  }
                ],
                "name" : "DATANODE"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "HDFS/HDFS_CLIENT//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "HDFS_CLIENT"
              },
              {
                "identities" : [
                  {
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "hdfs-site/dfs.journalnode.kerberos.internal.spnego.principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/JOURNALNODE//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hdfs-site/dfs.journalnode.keytab.file",
                      "file" : "${keytab_dir}/jn.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hadoop-env/hdfs_user}"
                      }
                    },
                    "name" : "journalnode_jn",
                    "principal" : {
                      "configuration" : "hdfs-site/dfs.journalnode.kerberos.principal",
                      "local_username" : "${hadoop-env/hdfs_user}",
                      "type" : "service",
                      "value" : "jn/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/JOURNALNODE/journalnode_jn"
                  }
                ],
                "name" : "JOURNALNODE"
              },
              {
                "configurations" : [
                  {
                    "hdfs-site" : {
                      "dfs.block.access.token.enable" : "true"
                    }
                  }
                ],
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-hdfs-audit/xasecure.audit.jaas.Client.option.keyTab",
                      "file" : "${keytab_dir}/nn.service.keytab"
                    },
                    "name" : "/HDFS/NAMENODE/namenode_nn",
                    "principal" : {
                      "configuration" : "ranger-hdfs-audit/xasecure.audit.jaas.Client.option.principal",
                      "value" : "nn/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/NAMENODE//HDFS/NAMENODE/namenode_nn"
                  },
                  {
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "hdfs-site/dfs.namenode.kerberos.internal.spnego.principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/NAMENODE//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hadoop-env/hdfs_user_keytab",
                      "file" : "${keytab_dir}/hdfs.headless.keytab",
                      "group" : {
                        "access" : "r",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hadoop-env/hdfs_user}"
                      }
                    },
                    "name" : "hdfs",
                    "principal" : {
                      "configuration" : "hadoop-env/hdfs_principal_name",
                      "local_username" : "${hadoop-env/hdfs_user}",
                      "type" : "user",
                      "value" : "${hadoop-env/hdfs_user}-${cluster_name|toLower()}@${realm}"
                    },
                    "referencePath" : "HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hdfs-site/dfs.namenode.keytab.file",
                      "file" : "${keytab_dir}/nn.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hadoop-env/hdfs_user}"
                      }
                    },
                    "name" : "namenode_nn",
                    "principal" : {
                      "configuration" : "hdfs-site/dfs.namenode.kerberos.principal",
                      "local_username" : "${hadoop-env/hdfs_user}",
                      "type" : "service",
                      "value" : "nn/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/NAMENODE/namenode_nn"
                  }
                ],
                "name" : "NAMENODE"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "hdfs-site/nfs.keytab.file",
                      "file" : "${keytab_dir}/nfs.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hadoop-env/hdfs_user}"
                      }
                    },
                    "name" : "nfsgateway",
                    "principal" : {
                      "configuration" : "hdfs-site/nfs.kerberos.principal",
                      "local_username" : "${hadoop-env/hdfs_user}",
                      "type" : "service",
                      "value" : "nfs/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/NFS_GATEWAY/nfsgateway"
                  }
                ],
                "name" : "NFS_GATEWAY"
              },
              {
                "identities" : [
                  {
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "hdfs-site/dfs.secondary.namenode.kerberos.internal.spnego.principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/SECONDARY_NAMENODE//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hdfs-site/dfs.secondary.namenode.keytab.file",
                      "file" : "${keytab_dir}/nn.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hadoop-env/hdfs_user}"
                      }
                    },
                    "name" : "secondary_namenode_nn",
                    "principal" : {
                      "configuration" : "hdfs-site/dfs.secondary.namenode.kerberos.principal",
                      "local_username" : "${hadoop-env/hdfs_user}",
                      "type" : "service",
                      "value" : "nn/_HOST@${realm}"
                    },
                    "referencePath" : "HDFS/SECONDARY_NAMENODE/secondary_namenode_nn"
                  }
                ],
                "name" : "SECONDARY_NAMENODE"
              }
            ],
            "configurations" : [
              {
                "core-site" : {
                  "hadoop.proxyuser.HTTP.groups" : "${hadoop-env/proxyuser_group}",
                  "hadoop.security.authentication" : "kerberos",
                  "hadoop.security.authorization" : "true"
                }
              },
              {
                "ranger-hdfs-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "HDFS//smokeuser"
              },
              {
                "keytab" : {
                  "configuration" : "hdfs-site/dfs.web.authentication.kerberos.keytab",
                  "file" : "${keytab_dir}/spnego.service.keytab"
                },
                "name" : "/spnego",
                "principal" : {
                  "configuration" : "hdfs-site/dfs.web.authentication.kerberos.principal",
                  "value" : "HTTP/_HOST@${realm}"
                },
                "referencePath" : "HDFS//spnego"
              }
            ],
            "name" : "HDFS"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "hive-site/hive.metastore.kerberos.keytab.file"
                    },
                    "name" : "/HIVE/HIVE_SERVER/hive_server_hive",
                    "principal" : {
                      "configuration" : "hive-site/hive.metastore.kerberos.principal"
                    },
                    "referencePath" : "HIVE/HIVE_METASTORE//HIVE/HIVE_SERVER/hive_server_hive"
                  }
                ],
                "name" : "HIVE_METASTORE"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "HIVE/HIVE_SERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hive-site/hive.server2.authentication.spnego.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "hive-site/hive.server2.authentication.spnego.principal"
                    },
                    "referencePath" : "HIVE/HIVE_SERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hive-atlas-application.properties/atlas.jaas.KafkaClient.option.keyTab"
                    },
                    "name" : "atlas_kafka",
                    "principal" : {
                      "configuration" : "hive-atlas-application.properties/atlas.jaas.KafkaClient.option.principal"
                    },
                    "reference" : "/HIVE/HIVE_SERVER/hive_server_hive",
                    "referencePath" : "HIVE/HIVE_SERVER/atlas_kafka"
                  },
                  {
                    "keytab" : {
                      "configuration" : "hive-site/hive.server2.authentication.kerberos.keytab",
                      "file" : "${keytab_dir}/hive.service.keytab",
                      "group" : {
                        "access" : "r",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${hive-env/hive_user}"
                      }
                    },
                    "name" : "hive_server_hive",
                    "principal" : {
                      "configuration" : "hive-site/hive.server2.authentication.kerberos.principal",
                      "local_username" : "${hive-env/hive_user}",
                      "type" : "service",
                      "value" : "hive/_HOST@${realm}"
                    },
                    "referencePath" : "HIVE/HIVE_SERVER/hive_server_hive"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ranger-hive-audit/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "ranger_audit",
                    "principal" : {
                      "configuration" : "ranger-hive-audit/xasecure.audit.jaas.Client.option.principal"
                    },
                    "reference" : "/HIVE/HIVE_SERVER/hive_server_hive",
                    "referencePath" : "HIVE/HIVE_SERVER/ranger_audit"
                  }
                ],
                "name" : "HIVE_SERVER"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "HIVE/HIVE_SERVER_INTERACTIVE//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "name" : "/HIVE/HIVE_SERVER/hive_server_hive",
                    "referencePath" : "HIVE/HIVE_SERVER_INTERACTIVE//HIVE/HIVE_SERVER/hive_server_hive"
                  },
                  {
                    "name" : "/HIVE/HIVE_SERVER/spnego",
                    "referencePath" : "HIVE/HIVE_SERVER_INTERACTIVE//HIVE/HIVE_SERVER/spnego"
                  }
                ],
                "name" : "HIVE_SERVER_INTERACTIVE"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "webhcat-site/templeton.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "webhcat-site/templeton.kerberos.principal"
                    },
                    "referencePath" : "HIVE/WEBHCAT_SERVER//spnego"
                  }
                ],
                "name" : "WEBHCAT_SERVER"
              }
            ],
            "configurations" : [
              {
                "core-site" : {
                  "hadoop.proxyuser.HTTP.hosts" : "${clusterHostInfo/webhcat_server_host}"
                }
              },
              {
                "hive-site" : {
                  "hive.metastore.sasl.enabled" : "true",
                  "hive.server2.authentication" : "KERBEROS"
                }
              },
              {
                "ranger-hive-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              },
              {
                "webhcat-site" : {
                  "templeton.hive.properties" : "hive.metastore.local=false,hive.metastore.uris=${clusterHostInfo/hive_metastore_host|each(thrift://%s:9083, \\\\,, \\s*\\,\\s*)},hive.metastore.sasl.enabled=true,hive.metastore.execute.setugi=true,hive.metastore.warehouse.dir=/apps/hive/warehouse,hive.exec.mode.local.auto=false,hive.metastore.kerberos.principal=hive/_HOST@${realm}",
                  "templeton.kerberos.secret" : "secret"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "HIVE//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "HIVE//spnego"
              }
            ],
            "name" : "HIVE"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-kafka-audit/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "/KAFKA/KAFKA_BROKER/kafka_broker",
                    "principal" : {
                      "configuration" : "ranger-kafka-audit/xasecure.audit.jaas.Client.option.principal"
                    },
                    "referencePath" : "KAFKA/KAFKA_BROKER//KAFKA/KAFKA_BROKER/kafka_broker"
                  },
                  {
                    "keytab" : {
                      "configuration" : "kafka-env/kafka_keytab",
                      "file" : "${keytab_dir}/kafka.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${kafka-env/kafka_user}"
                      }
                    },
                    "name" : "kafka_broker",
                    "principal" : {
                      "configuration" : "kafka-env/kafka_principal_name",
                      "type" : "service",
                      "value" : "${kafka-env/kafka_user}/_HOST@${realm}"
                    },
                    "referencePath" : "KAFKA/KAFKA_BROKER/kafka_broker"
                  }
                ],
                "name" : "KAFKA_BROKER"
              }
            ],
            "configurations" : [
              {
                "kafka-broker" : {
                  "authorizer.class.name" : "kafka.security.auth.SimpleAclAuthorizer",
                  "principal.to.local.class" : "kafka.security.auth.KerberosPrincipalToLocal",
                  "security.inter.broker.protocol" : "PLAINTEXTSASL",
                  "super.users" : "user:${kafka-env/kafka_user}",
                  "zookeeper.set.acl" : "true"
                }
              },
              {
                "ranger-kafka-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "KAFKA//smokeuser"
              }
            ],
            "name" : "KAFKA"
          },
          {
            "components" : [
              {
                "name" : "KERBEROS_CLIENT"
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "KERBEROS//smokeuser"
              }
            ],
            "name" : "KERBEROS"
          },
          {
            "components" : [
              {
                "configurations" : [
                  {
                    "core-site" : {
                      "hadoop.proxyuser.${knox-env/knox_user}.groups" : "${hadoop-env/proxyuser_group}",
                      "hadoop.proxyuser.${knox-env/knox_user}.hosts" : "${clusterHostInfo/knox_gateway_hosts}"
                    }
                  },
                  {
                    "gateway-site" : {
                      "gateway.hadoop.kerberos.secured" : "true",
                      "java.security.krb5.conf" : "/etc/krb5.conf"
                    }
                  },
                  {
                    "oozie-site" : {
                      "oozie.service.ProxyUserService.proxyuser.${knox-env/knox_user}.groups" : "${hadoop-env/proxyuser_group}",
                      "oozie.service.ProxyUserService.proxyuser.${knox-env/knox_user}.hosts" : "${clusterHostInfo/knox_gateway_hosts}"
                    }
                  },
                  {
                    "ranger-knox-audit" : {
                      "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                      "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                      "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                      "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                      "xasecure.audit.jaas.Client.option.storeKey" : "false",
                      "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                    }
                  },
                  {
                    "webhcat-site" : {
                      "webhcat.proxyuser.${knox-env/knox_user}.groups" : "${hadoop-env/proxyuser_group}",
                      "webhcat.proxyuser.${knox-env/knox_user}.hosts" : "${clusterHostInfo/knox_gateway_hosts}"
                    }
                  }
                ],
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-knox-audit/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "/KNOX/KNOX_GATEWAY/knox_principal",
                    "principal" : {
                      "configuration" : "ranger-knox-audit/xasecure.audit.jaas.Client.option.principal"
                    },
                    "referencePath" : "KNOX/KNOX_GATEWAY//KNOX/KNOX_GATEWAY/knox_principal"
                  },
                  {
                    "keytab" : {
                      "configuration" : "knox-env/knox_keytab_path",
                      "file" : "${keytab_dir}/knox.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${knox-env/knox_user}"
                      }
                    },
                    "name" : "knox_principal",
                    "principal" : {
                      "configuration" : "knox-env/knox_principal_name",
                      "local_username" : "${knox-env/knox_user}",
                      "type" : "service",
                      "value" : "${knox-env/knox_user}/_HOST@${realm}"
                    },
                    "referencePath" : "KNOX/KNOX_GATEWAY/knox_principal"
                  }
                ],
                "name" : "KNOX_GATEWAY"
              }
            ],
            "name" : "KNOX"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "logfeeder-env/logfeeder_kerberos_keytab",
                      "file" : "${keytab_dir}/logfeeder.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "root"
                      }
                    },
                    "name" : "logfeeder",
                    "principal" : {
                      "configuration" : "logfeeder-env/logfeeder_kerberos_principal",
                      "type" : "service",
                      "value" : "logfeeder/_HOST@${realm}"
                    },
                    "referencePath" : "LOGSEARCH/LOGSEARCH_LOGFEEDER/logfeeder"
                  }
                ],
                "name" : "LOGSEARCH_LOGFEEDER"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "logsearch-env/logsearch_kerberos_keytab",
                      "file" : "${keytab_dir}/logsearch.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${logsearch-env/logsearch_user}"
                      }
                    },
                    "name" : "logsearch",
                    "principal" : {
                      "configuration" : "logsearch-env/logsearch_kerberos_principal",
                      "type" : "service",
                      "value" : "logsearch/_HOST@${realm}"
                    },
                    "referencePath" : "LOGSEARCH/LOGSEARCH_SERVER/logsearch"
                  }
                ],
                "name" : "LOGSEARCH_SERVER"
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "LOGSEARCH//smokeuser"
              }
            ],
            "name" : "LOGSEARCH"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "MAHOUT/MAHOUT//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "MAHOUT"
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "MAHOUT//smokeuser"
              }
            ],
            "name" : "MAHOUT"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "MAPREDUCE2/HISTORYSERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "mapred-site/mapreduce.jobhistory.webapp.spnego-keytab-file",
                      "file" : "${keytab_dir}/spnego.service.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "mapred-site/mapreduce.jobhistory.webapp.spnego-principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "MAPREDUCE2/HISTORYSERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "mapred-site/mapreduce.jobhistory.keytab",
                      "file" : "${keytab_dir}/jhs.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${mapred-env/mapred_user}"
                      }
                    },
                    "name" : "history_server_jhs",
                    "principal" : {
                      "configuration" : "mapred-site/mapreduce.jobhistory.principal",
                      "local_username" : "${mapred-env/mapred_user}",
                      "type" : "service",
                      "value" : "jhs/_HOST@${realm}"
                    },
                    "referencePath" : "MAPREDUCE2/HISTORYSERVER/history_server_jhs"
                  }
                ],
                "name" : "HISTORYSERVER"
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "MAPREDUCE2//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "MAPREDUCE2//spnego"
              }
            ],
            "name" : "MAPREDUCE2"
          },
          {
            "auth_to_local_properties" : [
              "oozie-site/oozie.authentication.kerberos.name.rules"
            ],
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "OOZIE/OOZIE_SERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "oozie-site/oozie.authentication.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "oozie-site/oozie.authentication.kerberos.principal"
                    },
                    "referencePath" : "OOZIE/OOZIE_SERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "oozie-site/oozie.service.HadoopAccessorService.keytab.file",
                      "file" : "${keytab_dir}/oozie.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${oozie-env/oozie_user}"
                      }
                    },
                    "name" : "oozie_server",
                    "principal" : {
                      "configuration" : "oozie-site/oozie.service.HadoopAccessorService.kerberos.principal",
                      "local_username" : "${oozie-env/oozie_user}",
                      "type" : "service",
                      "value" : "oozie/_HOST@${realm}"
                    },
                    "referencePath" : "OOZIE/OOZIE_SERVER/oozie_server"
                  }
                ],
                "name" : "OOZIE_SERVER"
              }
            ],
            "configurations" : [
              {
                "oozie-site" : {
                  "local.realm" : "${realm}",
                  "oozie.authentication.type" : "kerberos",
                  "oozie.credentials.credentialclasses" : "hcat=org.apache.oozie.action.hadoop.HCatCredentials,hive2=org.apache.oozie.action.hadoop.Hive2Credentials",
                  "oozie.service.AuthorizationService.authorization.enabled" : "true",
                  "oozie.service.HadoopAccessorService.kerberos.enabled" : "true"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "OOZIE//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "OOZIE//spnego"
              }
            ],
            "name" : "OOZIE"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "PIG/PIG//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "PIG"
              }
            ],
            "name" : "PIG"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-admin-site/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "/RANGER/RANGER_ADMIN/rangeradmin",
                    "principal" : {
                      "configuration" : "ranger-admin-site/xasecure.audit.jaas.Client.option.principal"
                    },
                    "referencePath" : "RANGER/RANGER_ADMIN//RANGER/RANGER_ADMIN/rangeradmin"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ranger-admin-site/ranger.spnego.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "referencePath" : "RANGER/RANGER_ADMIN//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ranger-admin-site/ranger.admin.kerberos.keytab",
                      "file" : "${keytab_dir}/rangeradmin.service.keytab",
                      "group" : { },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ranger-env/ranger_user}"
                      }
                    },
                    "name" : "rangeradmin",
                    "principal" : {
                      "configuration" : "ranger-admin-site/ranger.admin.kerberos.principal",
                      "local_username" : "${ranger-env/ranger_user}",
                      "type" : "service",
                      "value" : "rangeradmin/_HOST@${realm}"
                    },
                    "referencePath" : "RANGER/RANGER_ADMIN/rangeradmin"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ranger-admin-site/ranger.lookup.kerberos.keytab",
                      "file" : "${keytab_dir}/rangerlookup.service.keytab",
                      "group" : { },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ranger-env/ranger_user}"
                      }
                    },
                    "name" : "rangerlookup",
                    "principal" : {
                      "configuration" : "ranger-admin-site/ranger.lookup.kerberos.principal",
                      "type" : "service",
                      "value" : "rangerlookup/_HOST@${realm}"
                    },
                    "referencePath" : "RANGER/RANGER_ADMIN/rangerlookup"
                  }
                ],
                "name" : "RANGER_ADMIN"
              },
              {
                "configurations" : [
                  {
                    "tagsync-application-properties" : {
                      "atlas.jaas.KafkaClient.loginModuleControlFlag" : "required",
                      "atlas.jaas.KafkaClient.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                      "atlas.jaas.KafkaClient.option.serviceName" : "kafka",
                      "atlas.jaas.KafkaClient.option.storeKey" : "true",
                      "atlas.jaas.KafkaClient.option.useKeyTab" : "true",
                      "atlas.kafka.sasl.kerberos.service.name" : "kafka",
                      "atlas.kafka.security.protocol" : "PLAINTEXTSASL"
                    }
                  }
                ],
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "tagsync-application-properties/atlas.jaas.KafkaClient.option.keyTab"
                    },
                    "name" : "/RANGER/RANGER_TAGSYNC/rangertagsync",
                    "principal" : {
                      "configuration" : "tagsync-application-properties/atlas.jaas.KafkaClient.option.principal"
                    },
                    "referencePath" : "RANGER/RANGER_TAGSYNC//RANGER/RANGER_TAGSYNC/rangertagsync"
                  },
                  {
                    "keytab" : {
                      "configuration" : "ranger-tagsync-site/ranger.tagsync.kerberos.keytab",
                      "file" : "${keytab_dir}/rangertagsync.service.keytab",
                      "group" : { },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ranger-env/ranger_user}"
                      }
                    },
                    "name" : "rangertagsync",
                    "principal" : {
                      "configuration" : "ranger-tagsync-site/ranger.tagsync.kerberos.principal",
                      "local_username" : "rangertagsync",
                      "type" : "service",
                      "value" : "rangertagsync/_HOST@${realm}"
                    },
                    "referencePath" : "RANGER/RANGER_TAGSYNC/rangertagsync"
                  }
                ],
                "name" : "RANGER_TAGSYNC"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-ugsync-site/ranger.usersync.kerberos.keytab",
                      "file" : "${keytab_dir}/rangerusersync.service.keytab",
                      "group" : { },
                      "owner" : {
                        "access" : "r",
                        "name" : "${ranger-env/ranger_user}"
                      }
                    },
                    "name" : "rangerusersync",
                    "principal" : {
                      "configuration" : "ranger-ugsync-site/ranger.usersync.kerberos.principal",
                      "local_username" : "rangerusersync",
                      "type" : "service",
                      "value" : "rangerusersync/_HOST@${realm}"
                    },
                    "referencePath" : "RANGER/RANGER_USERSYNC/rangerusersync"
                  }
                ],
                "name" : "RANGER_USERSYNC"
              }
            ],
            "configurations" : [
              {
                "ranger-admin-site" : {
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "RANGER//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "RANGER//spnego"
              }
            ],
            "name" : "RANGER"
          },
          {
            "auth_to_local_properties" : [
              "kms-site/hadoop.kms.authentication.kerberos.name.rules"
            ],
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-kms-audit/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "/RANGER_KMS/RANGER_KMS_SERVER/rangerkms",
                    "principal" : {
                      "configuration" : "ranger-kms-audit/xasecure.audit.jaas.Client.option.principal"
                    },
                    "referencePath" : "RANGER_KMS/RANGER_KMS_SERVER//RANGER_KMS/RANGER_KMS_SERVER/rangerkms"
                  },
                  {
                    "name" : "/smokeuser",
                    "referencePath" : "RANGER_KMS/RANGER_KMS_SERVER//smokeuser"
                  },
                  {
                    "keytab" : {
                      "configuration" : "kms-site/hadoop.kms.authentication.signer.secret.provider.zookeeper.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "kms-site/hadoop.kms.authentication.signer.secret.provider.zookeeper.kerberos.principal"
                    },
                    "referencePath" : "RANGER_KMS/RANGER_KMS_SERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "dbks-site/ranger.ks.kerberos.keytab",
                      "file" : "${keytab_dir}/rangerkms.service.keytab",
                      "group" : { },
                      "owner" : {
                        "access" : "r",
                        "name" : "${kms-env/kms_user}"
                      }
                    },
                    "name" : "rangerkms",
                    "principal" : {
                      "configuration" : "dbks-site/ranger.ks.kerberos.principal",
                      "local_username" : "keyadmin",
                      "type" : "service",
                      "value" : "rangerkms/_HOST@${realm}"
                    },
                    "referencePath" : "RANGER_KMS/RANGER_KMS_SERVER/rangerkms"
                  }
                ],
                "name" : "RANGER_KMS_SERVER"
              }
            ],
            "configurations" : [
              {
                "kms-site" : {
                  "hadoop.kms.authentication.kerberos.principal" : "*",
                  "hadoop.kms.authentication.type" : "kerberos"
                }
              },
              {
                "ranger-kms-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "RANGER_KMS//smokeuser"
              },
              {
                "keytab" : {
                  "configuration" : "kms-site/hadoop.kms.authentication.kerberos.keytab"
                },
                "name" : "/spnego",
                "referencePath" : "RANGER_KMS//spnego"
              }
            ],
            "name" : "RANGER_KMS"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "SLIDER/SLIDER//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "SLIDER"
              }
            ],
            "name" : "SLIDER"
          },
          {
            "components" : [
              {
                "configurations" : [
                  {
                    "ams-hbase-site" : {
                      "hbase.superuser" : "${activity-conf/global.activity.analyzer.user},${activity-conf/activity.explorer.user},${ams-env/ambari_metrics_user}"
                    }
                  },
                  {
                    "yarn-site" : {
                      "yarn.admin.acl" : "${yarn-env/yarn_user},dr.who"
                    }
                  }
                ],
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "activity-conf/global.activity.analyzer.user.keytab",
                      "file" : "${keytab_dir}/activity-analyzer.headless.keytab",
                      "group" : { },
                      "owner" : {
                        "access" : "r"
                      }
                    },
                    "name" : "activity_analyzer",
                    "principal" : {
                      "configuration" : "activity-conf/global.activity.analyzer.user.principal",
                      "local_username" : "${activity-conf/global.activity.analyzer.user}",
                      "type" : "service",
                      "value" : "${activity-conf/global.activity.analyzer.user}/_HOST@${realm}"
                    },
                    "referencePath" : "SMARTSENSE/ACTIVITY_ANALYZER/activity_analyzer"
                  }
                ],
                "name" : "ACTIVITY_ANALYZER"
              },
              {
                "configurations" : [
                  {
                    "ams-hbase-site" : {
                      "hbase.superuser" : "${activity-conf/global.activity.analyzer.user},${activity-conf/activity.explorer.user},${ams-env/ambari_metrics_user}"
                    }
                  },
                  {
                    "yarn-site" : {
                      "yarn.admin.acl" : "${yarn-env/yarn_user},dr.who"
                    }
                  }
                ],
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "activity-conf/activity.explorer.user.keytab",
                      "file" : "${keytab_dir}/activity-explorer.headless.keytab",
                      "group" : { },
                      "owner" : {
                        "access" : "r"
                      }
                    },
                    "name" : "activity_explorer",
                    "principal" : {
                      "configuration" : "activity-conf/activity.explorer.user.principal",
                      "local_username" : "${activity-conf/activity.explorer.user}",
                      "type" : "service",
                      "value" : "${activity-conf/activity.explorer.user}/_HOST@${realm}"
                    },
                    "referencePath" : "SMARTSENSE/ACTIVITY_EXPLORER/activity_explorer"
                  }
                ],
                "name" : "ACTIVITY_EXPLORER"
              }
            ],
            "name" : "SMARTSENSE"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "SPARK/LIVY_SERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "livy-conf/livy.server.auth.kerberos.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "livy-conf/livy.server.auth.kerberos.principal"
                    },
                    "referencePath" : "SPARK/LIVY_SERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "livy-conf/livy.server.kerberos.keytab",
                      "file" : "${keytab_dir}/livy.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${livy-env/livy_user}"
                      }
                    },
                    "name" : "livyuser",
                    "principal" : {
                      "configuration" : "livy-conf/livy.server.kerberos.principal",
                      "local_username" : "${livy-env/livy_user}",
                      "type" : "service",
                      "value" : "${livy-env/livy_user}/_HOST@${realm}"
                    },
                    "referencePath" : "SPARK/LIVY_SERVER/livyuser"
                  }
                ],
                "name" : "LIVY_SERVER"
              },
              {
                "name" : "SPARK_CLIENT"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "SPARK/SPARK_JOBHISTORYSERVER//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "SPARK_JOBHISTORYSERVER"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "SPARK/SPARK_THRIFTSERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "name" : "/HIVE/HIVE_SERVER/hive_server_hive",
                    "referencePath" : "SPARK/SPARK_THRIFTSERVER//HIVE/HIVE_SERVER/hive_server_hive"
                  }
                ],
                "name" : "SPARK_THRIFTSERVER"
              }
            ],
            "configurations" : [
              {
                "core-site" : {
                  "hadoop.proxyuser.${livy-env/livy_user}.groups" : "*",
                  "hadoop.proxyuser.${livy-env/livy_user}.hosts" : "*"
                }
              },
              {
                "livy-conf" : {
                  "livy.impersonation.enabled" : "true",
                  "livy.server.auth.type" : "kerberos",
                  "livy.superusers" : "zeppelin-${cluster_name}"
                }
              },
              {
                "spark-defaults" : {
                  "spark.history.kerberos.enabled" : "true"
                }
              },
              {
                "spark-thrift-sparkconf" : {
                  "spark.yarn.keytab" : "${spark-env/hive_kerberos_keytab}",
                  "spark.yarn.principal" : "${spark-env/hive_kerberos_principal}"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "SPARK//smokeuser"
              },
              {
                "keytab" : {
                  "configuration" : "spark-defaults/spark.history.kerberos.keytab",
                  "file" : "${keytab_dir}/spark.headless.keytab",
                  "group" : {
                    "access" : "",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${spark-env/spark_user}"
                  }
                },
                "name" : "sparkuser",
                "principal" : {
                  "configuration" : "spark-defaults/spark.history.kerberos.principal",
                  "local_username" : "${spark-env/spark_user}",
                  "type" : "user",
                  "value" : "${spark-env/spark_user}-${cluster_name|toLower()}@${realm}"
                },
                "referencePath" : "SPARK/sparkuser"
              }
            ],
            "name" : "SPARK"
          },
          {
            "components" : [
              {
                "name" : "SPARK2_CLIENT"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "SPARK2/SPARK2_JOBHISTORYSERVER//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "SPARK2_JOBHISTORYSERVER"
              },
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "SPARK2/SPARK2_THRIFTSERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "name" : "/HIVE/HIVE_SERVER/hive_server_hive",
                    "referencePath" : "SPARK2/SPARK2_THRIFTSERVER//HIVE/HIVE_SERVER/hive_server_hive"
                  }
                ],
                "name" : "SPARK2_THRIFTSERVER"
              }
            ],
            "configurations" : [
              {
                "spark2-defaults" : {
                  "spark.history.kerberos.enabled" : "true"
                }
              },
              {
                "spark2-thrift-sparkconf" : {
                  "spark.yarn.keytab" : "${spark2-env/hive_kerberos_keytab}",
                  "spark.yarn.principal" : "${spark2-env/hive_kerberos_principal}"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "SPARK2//smokeuser"
              },
              {
                "keytab" : {
                  "configuration" : "spark2-defaults/spark.history.kerberos.keytab",
                  "file" : "${keytab_dir}/spark2.headless.keytab",
                  "group" : {
                    "access" : "",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${spark2-env/spark_user}"
                  }
                },
                "name" : "spark2user",
                "principal" : {
                  "configuration" : "spark2-defaults/spark.history.kerberos.principal",
                  "local_username" : "${spark2-env/spark_user}",
                  "type" : "user",
                  "value" : "${spark2-env/spark_user}-${cluster_name|toLower()}@${realm}"
                },
                "referencePath" : "SPARK2/spark2user"
              }
            ],
            "name" : "SPARK2"
          },
          {
            "components" : [
              {
                "name" : "SQOOP"
              }
            ],
            "configurations" : [
              {
                "sqoop-atlas-application.properties" : {
                  "atlas.jaas.KafkaClient.option.renewTicket" : "true",
                  "atlas.jaas.KafkaClient.option.useTicketCache" : "true"
                }
              }
            ],
            "name" : "SQOOP"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "storm-env/nimbus_keytab",
                      "file" : "${keytab_dir}/nimbus.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${storm-env/storm_user}"
                      }
                    },
                    "name" : "nimbus_server",
                    "principal" : {
                      "configuration" : "storm-env/nimbus_principal_name",
                      "type" : "service",
                      "value" : "nimbus/_HOST@${realm}"
                    },
                    "referencePath" : "STORM/DRPC_SERVER/nimbus_server"
                  }
                ],
                "name" : "DRPC_SERVER"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-storm-audit/xasecure.audit.jaas.Client.option.keyTab"
                    },
                    "name" : "/STORM/NIMBUS/nimbus_server",
                    "principal" : {
                      "configuration" : "ranger-storm-audit/xasecure.audit.jaas.Client.option.principal"
                    },
                    "referencePath" : "STORM/NIMBUS//STORM/NIMBUS/nimbus_server"
                  },
                  {
                    "keytab" : {
                      "configuration" : "storm-env/nimbus_keytab",
                      "file" : "${keytab_dir}/nimbus.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${storm-env/storm_user}"
                      }
                    },
                    "name" : "nimbus_server",
                    "principal" : {
                      "configuration" : "storm-env/nimbus_principal_name",
                      "type" : "service",
                      "value" : "nimbus/_HOST@${realm}"
                    },
                    "referencePath" : "STORM/NIMBUS/nimbus_server"
                  }
                ],
                "name" : "NIMBUS"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "storm-env/storm_ui_keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "storm-env/storm_ui_principal_name"
                    },
                    "referencePath" : "STORM/STORM_UI_SERVER//spnego"
                  }
                ],
                "name" : "STORM_UI_SERVER"
              },
              {
                "name" : "SUPERVISOR"
              }
            ],
            "configurations" : [
              {
                "ranger-storm-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              },
              {
                "storm-site" : {
                  "drpc.authorizer" : "org.apache.storm.security.auth.authorizer.DRPCSimpleACLAuthorizer",
                  "java.security.auth.login.config" : "{{conf_dir}}/storm_jaas.conf",
                  "nimbus.admins" : "['{{storm_bare_jaas_principal}}', '{{ambari_bare_jaas_principal}}']",
                  "nimbus.authorizer" : "org.apache.storm.security.auth.authorizer.SimpleACLAuthorizer",
                  "nimbus.impersonation.acl" : "{ {{storm_bare_jaas_principal}} : {hosts: ['*'], groups: ['*']}}",
                  "nimbus.impersonation.authorizer" : "org.apache.storm.security.auth.authorizer.ImpersonationAuthorizer",
                  "nimbus.supervisor.users" : "['{{storm_bare_jaas_principal}}']",
                  "storm.principal.tolocal" : "org.apache.storm.security.auth.KerberosPrincipalToLocal",
                  "storm.zookeeper.superACL" : "sasl:{{storm_bare_jaas_principal}}",
                  "supervisor.enable" : "true",
                  "ui.filter" : "org.apache.hadoop.security.authentication.server.AuthenticationFilter",
                  "ui.filter.params" : "{'type': 'kerberos', 'kerberos.principal': '{{storm_ui_jaas_principal}}', 'kerberos.keytab': '{{storm_ui_keytab_path}}', 'kerberos.name.rules': 'DEFAULT'}"
                }
              }
            ],
            "identities" : [
              {
                "keytab" : {
                  "configuration" : "storm-atlas-application.properties/atlas.jaas.KafkaClient.option.keyTab"
                },
                "name" : "/STORM/storm_components",
                "principal" : {
                  "configuration" : "storm-atlas-application.properties/atlas.jaas.KafkaClient.option.principal"
                },
                "referencePath" : "STORM//STORM/storm_components"
              },
              {
                "name" : "/smokeuser",
                "referencePath" : "STORM//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "STORM//spnego"
              },
              {
                "keytab" : {
                  "configuration" : "storm-env/storm_keytab",
                  "file" : "${keytab_dir}/storm.headless.keytab",
                  "group" : {
                    "access" : "",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${storm-env/storm_user}"
                  }
                },
                "name" : "storm_components",
                "principal" : {
                  "configuration" : "storm-env/storm_principal_name",
                  "type" : "user",
                  "value" : "${storm-env/storm_user}-${cluster_name|toLower()}@${realm}"
                },
                "referencePath" : "STORM/storm_components"
              }
            ],
            "name" : "STORM"
          },
          {
            "components" : [
              {
                "configurations" : [
                  {
                    "tez-site" : {
                      "tez.am.view-acls" : ""
                    }
                  }
                ],
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "TEZ/TEZ_CLIENT//HDFS/NAMENODE/hdfs"
                  }
                ],
                "name" : "TEZ_CLIENT"
              }
            ],
            "name" : "TEZ"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "name" : "/HDFS/NAMENODE/hdfs",
                    "referencePath" : "YARN/APP_TIMELINE_SERVER//HDFS/NAMENODE/hdfs"
                  },
                  {
                    "keytab" : {
                      "configuration" : "yarn-site/yarn.timeline-service.http-authentication.kerberos.keytab",
                      "file" : "${keytab_dir}/spnego.service.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "yarn-site/yarn.timeline-service.http-authentication.kerberos.principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "YARN/APP_TIMELINE_SERVER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "yarn-site/yarn.timeline-service.keytab",
                      "file" : "${keytab_dir}/yarn.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${yarn-env/yarn_user}"
                      }
                    },
                    "name" : "app_timeline_server_yarn",
                    "principal" : {
                      "configuration" : "yarn-site/yarn.timeline-service.principal",
                      "local_username" : "${yarn-env/yarn_user}",
                      "type" : "service",
                      "value" : "yarn/_HOST@${realm}"
                    },
                    "referencePath" : "YARN/APP_TIMELINE_SERVER/app_timeline_server_yarn"
                  }
                ],
                "name" : "APP_TIMELINE_SERVER"
              },
              {
                "configurations" : [
                  {
                    "yarn-site" : {
                      "yarn.nodemanager.container-executor.class" : "org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor"
                    }
                  }
                ],
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "yarn-site/yarn.nodemanager.webapp.spnego-keytab-file",
                      "file" : "${keytab_dir}/spnego.service.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "yarn-site/yarn.nodemanager.webapp.spnego-principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "YARN/NODEMANAGER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "yarn-site/yarn.nodemanager.keytab",
                      "file" : "${keytab_dir}/nm.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${yarn-env/yarn_user}"
                      }
                    },
                    "name" : "nodemanager_nm",
                    "principal" : {
                      "configuration" : "yarn-site/yarn.nodemanager.principal",
                      "local_username" : "${yarn-env/yarn_user}",
                      "type" : "service",
                      "value" : "nm/_HOST@${realm}"
                    },
                    "referencePath" : "YARN/NODEMANAGER/nodemanager_nm"
                  }
                ],
                "name" : "NODEMANAGER"
              },
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "ranger-yarn-audit/xasecure.audit.jaas.Client.option.keyTab",
                      "file" : "${keytab_dir}/rm.service.keytab"
                    },
                    "name" : "/YARN/RESOURCEMANAGER/resource_manager_rm",
                    "principal" : {
                      "configuration" : "ranger-yarn-audit/xasecure.audit.jaas.Client.option.principal",
                      "value" : "rm/_HOST@${realm}"
                    },
                    "referencePath" : "YARN/RESOURCEMANAGER//YARN/RESOURCEMANAGER/resource_manager_rm"
                  },
                  {
                    "keytab" : {
                      "configuration" : "yarn-site/yarn.resourcemanager.webapp.spnego-keytab-file",
                      "file" : "${keytab_dir}/spnego.service.keytab"
                    },
                    "name" : "/spnego",
                    "principal" : {
                      "configuration" : "yarn-site/yarn.resourcemanager.webapp.spnego-principal",
                      "value" : "HTTP/_HOST@${realm}"
                    },
                    "referencePath" : "YARN/RESOURCEMANAGER//spnego"
                  },
                  {
                    "keytab" : {
                      "configuration" : "yarn-site/yarn.resourcemanager.keytab",
                      "file" : "${keytab_dir}/rm.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${yarn-env/yarn_user}"
                      }
                    },
                    "name" : "resource_manager_rm",
                    "principal" : {
                      "configuration" : "yarn-site/yarn.resourcemanager.principal",
                      "local_username" : "${yarn-env/yarn_user}",
                      "type" : "service",
                      "value" : "rm/_HOST@${realm}"
                    },
                    "referencePath" : "YARN/RESOURCEMANAGER/resource_manager_rm"
                  }
                ],
                "name" : "RESOURCEMANAGER"
              }
            ],
            "configurations" : [
              {
                "capacity-scheduler" : {
                  "yarn.scheduler.capacity.root.acl_administer_jobs" : "${yarn-env/yarn_user}",
                  "yarn.scheduler.capacity.root.acl_administer_queue" : "${yarn-env/yarn_user}",
                  "yarn.scheduler.capacity.root.default.acl_administer_jobs" : "${yarn-env/yarn_user}",
                  "yarn.scheduler.capacity.root.default.acl_administer_queue" : "${yarn-env/yarn_user}",
                  "yarn.scheduler.capacity.root.default.acl_submit_applications" : "${yarn-env/yarn_user}"
                }
              },
              {
                "core-site" : {
                  "hadoop.proxyuser.${yarn-env/yarn_user}.groups" : "*",
                  "hadoop.proxyuser.${yarn-env/yarn_user}.hosts" : "${clusterHostInfo/rm_host}"
                }
              },
              {
                "ranger-yarn-audit" : {
                  "xasecure.audit.destination.solr.force.use.inmemory.jaas.config" : "true",
                  "xasecure.audit.jaas.Client.loginModuleControlFlag" : "required",
                  "xasecure.audit.jaas.Client.loginModuleName" : "com.sun.security.auth.module.Krb5LoginModule",
                  "xasecure.audit.jaas.Client.option.serviceName" : "solr",
                  "xasecure.audit.jaas.Client.option.storeKey" : "false",
                  "xasecure.audit.jaas.Client.option.useKeyTab" : "true"
                }
              },
              {
                "yarn-site" : {
                  "yarn.acl.enable" : "true",
                  "yarn.admin.acl" : "${yarn-env/yarn_user},dr.who",
                  "yarn.nodemanager.linux-container-executor.cgroups.mount-path" : "",
                  "yarn.resourcemanager.proxy-user-privileges.enabled" : "false",
                  "yarn.resourcemanager.proxyusers.*.groups" : "",
                  "yarn.resourcemanager.proxyusers.*.hosts" : "",
                  "yarn.resourcemanager.proxyusers.*.users" : "",
                  "yarn.timeline-service.enabled" : "true",
                  "yarn.timeline-service.http-authentication.cookie.domain" : "",
                  "yarn.timeline-service.http-authentication.cookie.path" : "",
                  "yarn.timeline-service.http-authentication.kerberos.name.rules" : "",
                  "yarn.timeline-service.http-authentication.proxyusers.*.groups" : "",
                  "yarn.timeline-service.http-authentication.proxyusers.*.hosts" : "",
                  "yarn.timeline-service.http-authentication.proxyusers.*.users" : "",
                  "yarn.timeline-service.http-authentication.signature.secret" : "",
                  "yarn.timeline-service.http-authentication.signature.secret.file" : "",
                  "yarn.timeline-service.http-authentication.signer.secret.provider" : "",
                  "yarn.timeline-service.http-authentication.signer.secret.provider.object" : "",
                  "yarn.timeline-service.http-authentication.token.validity" : "",
                  "yarn.timeline-service.http-authentication.type" : "kerberos"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "YARN//smokeuser"
              },
              {
                "name" : "/spnego",
                "referencePath" : "YARN//spnego"
              }
            ],
            "name" : "YARN"
          },
          {
            "components" : [
              {
                "name" : "ZEPPELIN_MASTER"
              }
            ],
            "configurations" : [
              {
                "zeppelin-env" : {
                  "zeppelin.kerberos.enabled" : "true"
                }
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "ZEPPELIN//smokeuser"
              },
              {
                "keytab" : {
                  "configuration" : "zeppelin-env/zeppelin.server.kerberos.keytab",
                  "file" : "${keytab_dir}/zeppelin.server.kerberos.keytab",
                  "group" : {
                    "access" : "",
                    "name" : "${cluster-env/user_group}"
                  },
                  "owner" : {
                    "access" : "r",
                    "name" : "${zeppelin-env/zeppelin_user}"
                  }
                },
                "name" : "zeppelin_user",
                "principal" : {
                  "configuration" : "zeppelin-env/zeppelin.server.kerberos.principal",
                  "local_username" : "${zeppelin-env/zeppelin_user}",
                  "type" : "user",
                  "value" : "${zeppelin-env/zeppelin_user}-${cluster_name|toLower()}@${realm}"
                },
                "referencePath" : "ZEPPELIN/zeppelin_user"
              }
            ],
            "name" : "ZEPPELIN"
          },
          {
            "components" : [
              {
                "identities" : [
                  {
                    "keytab" : {
                      "configuration" : "zookeeper-env/zookeeper_keytab_path",
                      "file" : "${keytab_dir}/zk.service.keytab",
                      "group" : {
                        "access" : "",
                        "name" : "${cluster-env/user_group}"
                      },
                      "owner" : {
                        "access" : "r",
                        "name" : "${zookeeper-env/zk_user}"
                      }
                    },
                    "name" : "zookeeper_zk",
                    "principal" : {
                      "configuration" : "zookeeper-env/zookeeper_principal_name",
                      "type" : "service",
                      "value" : "zookeeper/_HOST@${realm}"
                    },
                    "referencePath" : "ZOOKEEPER/ZOOKEEPER_SERVER/zookeeper_zk"
                  }
                ],
                "name" : "ZOOKEEPER_SERVER"
              }
            ],
            "identities" : [
              {
                "name" : "/smokeuser",
                "referencePath" : "ZOOKEEPER//smokeuser"
              }
            ],
            "name" : "ZOOKEEPER"
          }
        ]
      }
    },
    "stack_name" : "HDP",
    "stack_version" : "2.5"
  }
}